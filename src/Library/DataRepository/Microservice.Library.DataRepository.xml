<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microservice.Library.DataRepository</name>
    </assembly>
    <members>
        <member name="T:Microservice.Library.DataRepository.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Microservice.Library.DataRepository.DatabaseType.Odbc">
            <summary>
            通用的 Odbc 实现，只能做基本的 Crud 操作 <para></para>
            不支持实体结构迁移、不支持分页（只能 Take 查询） <para></para>
            
            通用实现为了让用户自己适配更多的数据库，比如连接 mssql 2000、db2 等数据库<para></para>
            默认适配 SqlServer，可以继承后重新适配 FreeSql.Odbc.Default.OdbcAdapter，最好去看下代码 <para></para>
            
            适配新的 OdbcAdapter，请在 FreeSqlBuilder.Build 之后调用 IFreeSql.SetOdbcAdapter 方法设置
            </summary>
        </member>
        <member name="F:Microservice.Library.DataRepository.DatabaseType.OdbcDameng">
            <summary>
            武汉达梦数据库有限公司，基于 Odbc 的实现
            </summary>
        </member>
        <member name="F:Microservice.Library.DataRepository.DatabaseType.MsAccess">
            <summary>
            Microsoft Office Access 是由微软发布的关联式数据库管理系统
            </summary>
        </member>
        <member name="F:Microservice.Library.DataRepository.DatabaseType.Dameng">
            <summary>
            武汉达梦数据库有限公司，基于 DmProvider.dll 的实现
            </summary>
        </member>
        <member name="T:Microservice.Library.DataRepository.DbHelper">
            <summary>
            数据库帮助类
            <!--LCTR 2019-11-14-->
            </summary>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="providerFactory"></param>
        </member>
        <member name="F:Microservice.Library.DataRepository.DbHelper.Transaction">
            <summary>
            事务
            </summary>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.BeginTrans(System.Nullable{System.Int32},System.Nullable{System.Data.IsolationLevel})">
            <summary>
            开启事务
            </summary>
            <param name="id">事务标识</param>
            <param name="il">隔离等级</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.EndTrans(System.Nullable{System.Int32})">
            <summary>
            结束事务
            </summary>
            <param name="id">事务标识</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetTableName``1">
            <summary>
            从实体提取数据库表名
            </summary>
            <typeparam name="T">实体</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetPKName``1">
            <summary>
            从实体提取主键名
            </summary>
            <typeparam name="T">实体</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.CreateDbParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            创建参数
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microservice.Library.DataRepository.DbHelper.ProviderFactory">
            <summary>
            驱动
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbHelper.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.Commit(System.Nullable{System.Int32})">
            <summary>
            提交事务
            </summary>
            <param name="id">事务标识(为null时使用当前线程id)</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.Rollback(System.Nullable{System.Int32})">
            <summary>
            回滚事务
            </summary>
            <param name="id">事务标识(为null时使用当前线程id)</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataReader(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataReader
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataReader(System.String,System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataReader
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataReader(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataReader
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataReader(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataReader
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataSet(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataSet
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataSet(System.String,System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataSet
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataSet(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataSet
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataSet(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataSet
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataTable(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataTable
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataTable(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataTable
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataTable(System.String,System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataTable
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDataTable(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回DataTable
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetList``1(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回List
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetList``1(System.String,System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回List
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetList``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回List
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetList``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回List
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntityList``1(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体集合
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntityList``1(System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体集合
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="alias">主表别名</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntityList``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体集合
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntityList``1(System.String,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体集合
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="alias">主表别名</param>
            <param name="parameters">参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntityList``1(System.String,Microservice.Library.DataRepository.IDataRepositoryPagination,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体集合
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="pagination">分页参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntityList``1(System.String,System.String,Microservice.Library.DataRepository.IDataRepositoryPagination,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体集合
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="alias">主表别名</param>
            <param name="pagination">分页参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntityList``1(System.String,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},Microservice.Library.DataRepository.IDataRepositoryPagination,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体集合
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="alias">主表别名</param>
            <param name="parameters">参数</param>
            <param name="pagination">分页参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntity``1(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntity``1(System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="alias">主表别名</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntity``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntity``1(System.String,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            查询实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="where">where条件(确保语句是安全的)</param>
            <param name="alias">主表别名</param>
            <param name="parameters">参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntity``1(System.Int64)">
            <summary>
            查询实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="id">主键值</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntity``1(System.String)">
            <summary>
            查询实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="id">主键值</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntity``1(System.Object[])">
            <summary>
            查询实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="keyValues">匿名对象键值对</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetEntity``1(System.Boolean,System.Nullable{System.Int32},System.Object[])">
            <summary>
            查询实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <param name="keyValues">匿名对象键值对</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetScalar``1(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回首行首列内容
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetScalar``1(System.String,System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回首行首列内容
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetScalar``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回首行首列内容
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetScalar``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回首行首列内容
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.ExecuteSql(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回受影响的行数
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.ExecuteSql(System.String,System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回受影响的行数
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.ExecuteSql(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回受影响的行数
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.ExecuteSql(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            执行sql语句并返回受影响的行数
            </summary>
            <param name="sql">Sql语句(确保语句是安全的)</param>
            <param name="parameters">参数</param>
            <param name="type">命令类型</param>
            <param name="tran">是否开启事务</param>
            <param name="transId">事务标识(为null时使用当前线程id)</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDbTableInfo(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            获取数据库中的所有表
            </summary>
            <param name="schemaName">模式（架构）</param>
            <param name="table">指定表</param>
            <param name="tableIgnore">忽略表</param>
            <param name="getColumn">获取列信息</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDbColumnInfo(System.String)">
            <summary>
            通过连接字符串和表名获取数据库表的信息
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.GetDbColumnInfo(System.String,System.String)">
            <summary>
            通过连接字符串和表名获取数据库表的信息
            </summary>
            <param name="schemaName">模式（架构）</param>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.DbTypeStr2CsharpType(System.String)">
            <summary>
            将数据库类型转为对应C#数据类型
            </summary>
            <param name="dbTypeStr">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbHelper.SaveEntityToFile(System.Collections.Generic.List{Microservice.Library.DataRepository.DbColumn},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            生成实体文件
            </summary>
            <param name="infos">表字段信息</param>
            <param name="tableName">表名</param>
            <param name="tableDescription">表描述信息</param>
            <param name="filePath">文件路径（包含文件名）</param>
            <param name="nameSpace">实体命名空间</param>
            <param name="schemaName">架构（模式）名</param>
        </member>
        <member name="T:Microservice.Library.DataRepository.DbTableInfo">
            <summary>
            表结构
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbTableInfo.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbTableInfo.NameSpace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbTableInfo.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbTableInfo.SchemaName">
            <summary>
            表的架构
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbTableInfo.Rows">
            <summary>
            表的记录数
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbTableInfo.HasPrimaryKey">
            <summary>
            含有主键
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbTableInfo.PrimaryKey">
            <summary>
            主键名称
            <para>;号拼接</para>
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbTableInfo.Description">
            <summary>
            备注与说明
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbTableInfo.Column">
            <summary>
            表字段结构集合
            </summary>
        </member>
        <member name="T:Microservice.Library.DataRepository.DbColumn">
            <summary>
            表字段结构
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.CSharpType">
            <summary>
            数据库类型对应的C#类型
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.CSharpTypeName">
            <summary>
            数据库类型对应的C#类型名称
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.IsNumber">
            <summary>
            为数值
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.IsDateTime">
            <summary>
            为日期时间
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.HasOption">
            <summary>
            为选项
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.Range_Min">
            <summary>
            范围最小值
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.Range_Max">
            <summary>
            范围最大值
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.Options">
            <summary>
            选项
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.IsPrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.IsForeignKey">
            <summary>
            外键
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.FKTableNames">
            <summary>
            外键关系表集合
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.ByteLength">
            <summary>
            字节长度
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.CharLength">
            <summary>
            字符长度
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.Precision">
            <summary>
            精度
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.Scale">
            <summary>
            小数位
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.IsIdentity">
            <summary>
            自增列
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.Default">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.IsNullable">
            <summary>
            可为空
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.IsNullableType">
            <summary>
            可为空类型
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.Comment">
            <summary>
            注释
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.DbColumn.Description_Other">
            <summary>
            其他说明
            </summary>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbColumn.Init(Microservice.Library.DataRepository.DatabaseType,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="errorUseDefault">异常时使用默认值</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.DataRepository.DbType2CSharpType">
            <summary>
            数据库数据类型转C#数据类型
            <!--LCTR 2019-06-10-->
            </summary>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbType2CSharpType.GetCSharpTypeName(Microservice.Library.DataRepository.DatabaseType,System.String)">
            <summary>
            获取数据库数据类型对应的C#数据类型名称
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="dataType">数据库数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbType2CSharpType.GetCSharpType(Microservice.Library.DataRepository.DatabaseType,System.String)">
            <summary>
            获取数据库数据类型对应的C#数据类型
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="dataType">数据库数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbType2CSharpType.GetCSharpTypeName_MySQL(System.String)">
            <summary>
            获取MySQL数据库数据类型对应的C#数据类型名称
            </summary>
            <param name="dataType">数据库数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbType2CSharpType.GetCSharpType_MySQL(System.String)">
            <summary>
            获取MySQL数据库数据类型对应的C#数据类型
            </summary>
            <param name="dataType">数据库数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbType2CSharpType.GetCsharpTypeName_SQLServer(System.String)">
            <summary>
            获取SQLServer数据库数据类型对应的C#数据类型名称
            </summary>
            <param name="dataType">数据库数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.DbType2CSharpType.GetCsharpType_SQLServer(System.String)">
            <summary>
            获取SQLServer数据库数据类型对应的C#数据类型
            </summary>
            <param name="dataType">数据库数据类型</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.DataRepository.IBaseRepository">
            <summary>
            基数据仓储
            </summary>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.Insert``1(``0)">
            <summary>
            添加单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.Insert``1(System.Collections.Generic.List{``0})">
            <summary>
            添加多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.DeleteAll``1">
            <summary>
            删除所有记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.Delete``1(``0)">
            <summary>
            删除单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.Delete``1(System.Collections.Generic.List{``0})">
            <summary>
            删除多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            按条件删除记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="condition">筛选条件</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.Update``1(``0)">
            <summary>
            更新单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.Update``1(System.Collections.Generic.List{``0})">
            <summary>
            更新多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.UpdateAny``1(``0,System.Collections.Generic.List{System.String})">
            <summary>
            更新单条记录的某些属性
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
            <param name="properties">属性</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.UpdateAny``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.String})">
            <summary>
            更新多条记录的某些属性
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
            <param name="properties">属性</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.UpdateWhere``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{``0})">
            <summary>
            按照条件更新记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="whereExpre">筛选条件</param>
            <param name="set">更新操作</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IBaseRepository.GetList``1">
            <summary>
            获取所有数据
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.DataRepository.IDataRepositoryPagination">
            <summary>
            分页设置
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.IDataRepositoryPagination.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.IDataRepositoryPagination.PageRows">
            <summary>
            每页数据量
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.IDataRepositoryPagination.SortField">
            <summary>
            排序列
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.IDataRepositoryPagination.SortType">
            <summary>
            排序类型
            </summary>
            <remarks>
            <para>asc</para>
            <para>desc</para>
            </remarks>
        </member>
        <member name="P:Microservice.Library.DataRepository.IDataRepositoryPagination.RecordCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="M:Microservice.Library.DataRepository.IDataRepositoryPagination.DataRepositoryFilter``1(System.Linq.IQueryable{``0})">
            <summary>
            过滤
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IDataRepositoryPagination.DataRepositoryOrderBy``1(System.Linq.IQueryable{``0})">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.DataRepository.IQueryableExtention">
            <summary>
            IQueryable{T}的拓展操作
            作者：Coldairarrow
            </summary>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.GetPagination``1(System.Linq.IQueryable{``0},Microservice.Library.DataRepository.IDataRepositoryPagination)">
            <summary>
            获取分页后的数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源IQueryable</param>
            <param name="pagination">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            动态排序法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">IQueryable数据源</param>
            <param name="sortColumn">排序的列</param>
            <param name="sortType">排序的方法</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.OrderBy``1(System.Linq.IQueryable{``0},System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            动态排序法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="sort">排序规则，Key为排序列，Value为排序类型</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.AsExpandable1``1(System.Linq.IQueryable{``0})">
            <summary>
            拓展IQueryable{T}方法操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.RemoveOrderBy``1(System.Linq.IQueryable{``0})">
            <summary>
            删除OrderBy表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.RemoveOrderBy(System.Linq.IQueryable)">
            <summary>
            删除OrderBy表达式
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.RemoveSkip``1(System.Linq.IQueryable{``0})">
            <summary>
            删除Skip表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.RemoveSkip(System.Linq.IQueryable)">
            <summary>
            删除Skip表达式
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.RemoveTake``1(System.Linq.IQueryable{``0})">
            <summary>
            删除Take表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.RemoveTake(System.Linq.IQueryable)">
            <summary>
            删除Take表达式
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.GetSkipCount(System.Linq.IQueryable)">
            <summary>
            获取Skip数量
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.GetTakeCount(System.Linq.IQueryable)">
            <summary>
            获取Take数量
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.GetOrderBy(System.Linq.IQueryable)">
            <summary>
            获取排序参数
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.ChangeSource(System.Linq.IQueryable,System.Linq.IQueryable)">
            <summary>
            切换数据源,保留原数据源中的Expression
            </summary>
            <param name="source">原数据源</param>
            <param name="targetSource">目标数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.GetObjQuery(System.Linq.IQueryable)">
            <summary>
            获取ObjectQuery
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IQueryableExtention.ToSql(System.Linq.IQueryable)">
            <summary>
            转为SQL语句，包括参数
            </summary>
            <param name="query">查询原源</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.DataRepository.IQueryableExtention.RemoveOrderByVisitor">
            <summary>
            删除OrderBy表达式
            </summary>
        </member>
        <member name="T:Microservice.Library.DataRepository.IQueryableExtention.RemoveSkipVisitor">
            <summary>
            删除Skip表达式
            </summary>
        </member>
        <member name="T:Microservice.Library.DataRepository.IQueryableExtention.RemoveTakeVisitor">
            <summary>
            删除Take表达式
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.IRepository.HandleSqlLog">
            <summary>
            SQL日志处理方法
            </summary>
            <value>
            The handle SQL log.
            </value>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.CommitDb">
            <summary>
            提交到数据库
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.IRepository.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Microservice.Library.DataRepository.IRepository.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.UseTransaction(System.Data.Common.DbTransaction)">
            <summary>
            使用已存在的事物
            </summary>
            <param name="transaction">事物对象</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.GetTransaction">
            <summary>
            获取事物对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.Insert(System.Collections.Generic.List{System.Object})">
            <summary>
            添加多条记录
            </summary>
            <param name="entities">对象集合</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.BulkInsert``1(System.Collections.Generic.List{``0})">
            <summary>
            使用Bulk批量导入,速度快
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.DeleteAll(System.Type)">
            <summary>
            删除所有记录
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.Delete(System.Type,System.String)">
            <summary>
            删除单条记录
            </summary>
            <param name="type">实体类型</param>
            <param name="key">主键</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.Delete(System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            删除多条记录
            </summary>
            <param name="type">实体类型</param>
            <param name="keys">多条记录主键集合</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.Delete(System.Collections.Generic.List{System.Object})">
            <summary>
            删除多条记录
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.Delete``1(System.String)">
            <summary>
            删除单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="key">主键</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.Delete``1(System.Collections.Generic.List{System.String})">
            <summary>
            删除多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="keys">多条记录主键集合</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.Delete_Sql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用SQL语句按照条件删除数据
            用法:Delete_Sql"Base_User"(x=>x.Id == "Admin")
            注：生成的SQL类似于DELETE FROM [Base_User] WHERE [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="where">条件</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.Delete_Sql(System.Type,System.String,System.Object[])">
            <summary>
            使用SQL语句按照条件删除数据
            </summary>
            <param name="entityType">实体类型</param>
            <param name="where">动态where</param>
            <param name="paramters">where参数</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.Update(System.Collections.Generic.List{System.Object})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.UpdateAny(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.String})">
            <summary>
            更新多条记录的某些属性
            </summary>
            <param name="entities">实体对象集合</param>
            <param name="properties">属性</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.UpdateWhere_Sql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.ValueTuple{System.String,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="where">筛选条件</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.UpdateWhere_Sql(System.Type,System.String,System.Object[],System.ValueTuple{System.String,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            </summary>
            <param name="entityType">实体类型</param>
            <param name="where">动态where</param>
            <param name="paramters">where参数</param>
            <param name="values">赋值</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.GetEntity``1(System.Object[])">
            <summary>
            获取单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="keyValue">主键</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.GetList(System.Type)">
            <summary>
            获取列表
            </summary>
            <param name="type">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.GetIQueryable``1">
            <summary>
            获取IQueryable
            注:默认取消实体追踪
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.GetIQueryable(System.Type)">
            <summary>
            获取IQueryable
            注:默认取消实体追踪
            </summary>
            <param name="type">实体泛型</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.GetDataTableWithSql(System.String)">
            <summary>
            通过SQL获取DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.GetDataTableWithSql(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            通过SQL获取DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.GetListBySql``1(System.String)">
            <summary>
            通过SQL获取List
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="sqlStr">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.GetListBySql``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            通过SQL获取List
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="sqlStr">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.ExecuteSql(System.String)">
            <summary>
            执行SQL语句
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.ExecuteSql(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
        </member>
        <member name="M:Microservice.Library.DataRepository.IRepository.ToSql(System.Linq.IQueryable)">
            <summary>
            转为SQL语句，包括参数
            </summary>
            <param name="query">查询原源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.IShardingRepository.GetIShardingQueryable``1">
            <summary>
            获取IShardingQueryable
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataRepository.ITransaction.RunTransaction(System.Action,System.Data.IsolationLevel)">
            <summary>
            执行事务,具体执行操作包括在action中
            注:支持自定义事务级别,默认为ReadCommitted
            </summary>
            <param name="action">执行操作</param>
            <param name="isolationLevel">事务级别,默认为ReadCommitted</param>
            <returns></returns>
        </member>
    </members>
</doc>
