<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library.OpenApi</name>
    </assembly>
    <members>
        <member name="T:Library.OpenApi.Annotations.OpenApiIgnoreAttribute">
            <summary>
            处理接口架构时忽略带有此特性的对象
            </summary>
        </member>
        <member name="T:Library.OpenApi.Annotations.OpenApiSchemaAttribute">
            <summary>
            接口架构属性
            </summary>
            <remarks>LCTR 2020-03-10</remarks>
        </member>
        <member name="M:Library.OpenApi.Annotations.OpenApiSchemaAttribute.#ctor(System.String,System.String,System.Object)">
            <summary>
            
            <para><paramref name="type" cref="T:Library.OpenApi.Annotations.OpenApiSchemaType"/></para>
            <para><paramref name="format" cref="T:Library.OpenApi.Annotations.OpenApiSchemaFormat"/></para>
            </summary>
            <param name="type" >类型</param>
            <param name="format">格式</param>
            <param name="value">示例值</param>
        </member>
        <member name="P:Library.OpenApi.Annotations.OpenApiSchemaAttribute.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Library.OpenApi.Annotations.OpenApiSchemaAttribute.Format">
            <summary>
            格式
            </summary>
        </member>
        <member name="P:Library.OpenApi.Annotations.OpenApiSchemaAttribute.Value">
            <summary>
            示例值
            </summary>
        </member>
        <member name="T:Library.OpenApi.Annotations.OpenApiSchemaFormat">
            <summary>
            接口架构格式
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.integer_byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.integer_byte_array">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.integer_binary">
            <summary>
            二进制数组
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.integer_int32">
            <summary>
            32位整数
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.integer_int64">
            <summary>
            64位整数
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.number_float">
            <summary>
            单精度浮点数
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.number_double">
            <summary>
            双精度浮点数
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.number_decimal">
            <summary>
            高精度浮点数
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.string_date">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.string_datetime">
            <summary>
            日期和时间
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.string_date_original">
            <summary>
            原始时间
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.string_password">
            <summary>
            密文
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.enum_description">
            <summary>
            包含注释
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaFormat.model_once">
            <summary>
            只解析一次
            <para>防止无限递归</para>
            </summary>
        </member>
        <member name="T:Library.OpenApi.Annotations.OpenApiSchemaStrictModeAttribute">
            <summary>
            接口架构严格模式
            <para>1：未指定OpenApiSchemaAttribute特性的属性将不会输出</para>
            <para>2：当存在MainTag时，未指定SubTag的属性将不会处理</para>
            </summary>
        </member>
        <member name="T:Library.OpenApi.Annotations.OpenApiSchemaType">
            <summary>
            接口架构类型
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaType.boolean">
            <summary>
            布尔
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaType.integer">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaType.number">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaType.string">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaType.enum">
            <summary>
            枚举
            </summary>
        </member>
        <member name="F:Library.OpenApi.Annotations.OpenApiSchemaType.model">
            <summary>
            嵌套模型
            </summary>
        </member>
        <member name="T:Library.OpenApi.Annotations.OpenApiMainTagAttribute">
            <summary>
            主标签
            <para>主要的，用于类</para>
            <para>和附属标签搭配使用</para>
            </summary>
        </member>
        <member name="M:Library.OpenApi.Annotations.OpenApiMainTagAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="P:Library.OpenApi.Annotations.OpenApiMainTagAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Library.OpenApi.Annotations.OpenApiSubTagAttribute">
            <summary>
            附属标签
            <para>标明所属，用于属性和字段</para>
            <para>和主标签搭配使用</para>
            </summary>
        </member>
        <member name="M:Library.OpenApi.Annotations.OpenApiSubTagAttribute.#ctor(System.String[])">
            <summary>
            
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="P:Library.OpenApi.Annotations.OpenApiSubTagAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Library.OpenApi.ExampleModel.AInfo">
            <summary>
            A信息
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.AInfo.B">
            <summary>
            所属B
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.AInfo.Cs">
            <summary>
            相关C集合
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.AInfo.Ds">
            <summary>
            相关D集合
            </summary>
        </member>
        <member name="T:Library.OpenApi.ExampleModel.BInfo">
            <summary>
            B信息
            </summary>
        </member>
        <member name="T:Library.OpenApi.ExampleModel.CInfo">
            <summary>
            C信息
            </summary>
        </member>
        <member name="T:Library.OpenApi.ExampleModel.DInfo">
            <summary>
            D信息
            </summary>
        </member>
        <member name="T:Library.OpenApi.ExampleModel.Example_A">
            <summary>
            A
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_A.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_A.ParentId">
            <summary>
            父AId
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_A.BId">
            <summary>
            所属B
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_A.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_A.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_A.CreatorId">
            <summary>
            创建者
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_A.CreatorName">
            <summary>
            创建者名称
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_A.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_A.ModifyTime">
            <summary>
            最近修改时间
            </summary>
        </member>
        <member name="T:Library.OpenApi.ExampleModel.Example_B">
            <summary>
            B
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_B.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_B.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_B.CreatorId">
            <summary>
            创建者
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_B.CreatorName">
            <summary>
            创建者名称
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_B.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_B.ModifyTime">
            <summary>
            最近修改时间
            </summary>
        </member>
        <member name="T:Library.OpenApi.ExampleModel.Example_C">
            <summary>
            C
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_C.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_C.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_C.CreatorId">
            <summary>
            创建者
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_C.CreatorName">
            <summary>
            创建者名称
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_C.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_C.ModifyTime">
            <summary>
            最近修改时间
            </summary>
        </member>
        <member name="T:Library.OpenApi.ExampleModel.Example_D">
            <summary>
            D
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_D.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_D.AId">
            <summary>
            所属A
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_D.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_D.CreatorId">
            <summary>
            创建者
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_D.CreatorName">
            <summary>
            创建者名称
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_D.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Library.OpenApi.ExampleModel.Example_D.ModifyTime">
            <summary>
            最近修改时间
            </summary>
        </member>
        <member name="T:Library.OpenApi.Extention.CacheExtention">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:Library.OpenApi.Extention.CacheExtention.OpenApiObjectDic">
            <summary>
            类型的Api架构
            </summary>
        </member>
        <member name="F:Library.OpenApi.Extention.CacheExtention.AssemblyOfTypeDic">
            <summary>
            类型的命名空间
            </summary>
        </member>
        <member name="F:Library.OpenApi.Extention.CacheExtention.TypesOfTypeDic">
            <summary>
            类型的架构类型集合
            </summary>
        </member>
        <member name="F:Library.OpenApi.Extention.CacheExtention.PropertysOfTypeDic">
            <summary>
            类型的架构属性集合
            </summary>
        </member>
        <member name="F:Library.OpenApi.Extention.CacheExtention.EnumNameAndDescriptionDic">
            <summary>
            枚举的字段说明集合
            </summary>
        </member>
        <member name="M:Library.OpenApi.Extention.CacheExtention.GetPropertysOfTypeDic(System.Type)">
            <summary>
            获取类型的架构属性集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.CacheExtention.GetPropertysOfTypeDic(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String)">
            <summary>
            获取类型的架构属性集合
            </summary>
            <param name="dic"></param>
            <param name="typeFullName"></param>
        </member>
        <member name="M:Library.OpenApi.Extention.CacheExtention.SetPropertysOfTypeDic(System.Type,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            设置类型的架构属性集合
            </summary>
            <param name="type"></param>
            <param name="dic"></param>
        </member>
        <member name="M:Library.OpenApi.Extention.CacheExtention.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:Library.OpenApi.Extention.OpenApiExtention">
            <summary>
            接口文档相关扩展方法
            </summary>
        </member>
        <member name="M:Library.OpenApi.Extention.OpenApiExtention.CreateDefaultSchema(System.Reflection.PropertyInfo)">
            <summary>
            获取默认架构
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.OpenApiExtention.GetOrNullFor(System.Type,System.Boolean)">
            <summary>
            获取或创建接口初始类
            </summary>
            <param name="type"></param>
            <param name="innerModel">处理内部模型</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.OpenApiExtention.CreateFor(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            创建接口初始类
            </summary>
            <param name="property"></param>
            <param name="innerModel">处理内部模型</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.OpenApiExtention.GetEnumOpenApiAny(System.Type,System.Object)">
            <summary>
            获取枚举的描述信息
            </summary>
            <param name="type">枚举类型</param>
            <param name="default">默认值</param>
            <returns></returns>
        </member>
        <member name="T:Library.OpenApi.Extention.SchemaExtention">
            <summary>
            架构相关拓展方法
            </summary>
        </member>
        <member name="F:Library.OpenApi.Extention.SchemaExtention.EnumerableMethods">
            <summary>
            Enumerable类常用方法
            </summary>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.TryCast``1(System.Object,``0@)">
            <summary>
            转换类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="typedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.FilterModel(System.Type,System.Action{System.Type,System.Reflection.PropertyInfo},System.Func{System.Type,System.Reflection.PropertyInfo,System.Boolean},System.Boolean)">
            <summary>
            过滤模型
            </summary>
            <param name="type">类型</param>
            <param name="after">处理成员之后</param>
            <param name="befor">处理成员之前(返回false,跳过该成员)</param>
            <param name="innerModel">处理内部模型</param>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.ToOpenApiObjectFilterWhenAfter``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            反序列化后过滤属性
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="json">需要反序列化的Json字符串</param>
            <param name="exceptionProperties">特别输出的属性</param>
            <param name="ignoreProperties">特别忽略的属性</param>
            <remarks>如果在特别输出参数和特别忽略参数中同时指定了同一个属性，那么最终不会输出该属性</remarks>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.FilterOpenApiObject(System.Object,System.Type,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            过滤属性
            </summary>
            <param name="object"></param>
            <param name="type"></param>
            <param name="propertyDic"></param>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.Foreach(System.Object,System.Type,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            遍历集合
            </summary>
            <param name="objectList"></param>
            <param name="type"></param>
            <param name="propertyDic"></param>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.ToOpenApiObjectFilterWhenBefor``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            过滤属性后反序列化
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="json">需要反序列化的Json字符串</param>
            <param name="exceptionProperties">特别输出的属性</param>
            <param name="ignoreProperties">特别忽略的属性</param>
            <remarks>如果在特别输出参数和特别忽略参数中同时指定了同一个属性，那么最终不会输出该属性</remarks>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.FilterOpenApiObject(Newtonsoft.Json.Linq.JToken,System.Type,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            过滤属性
            </summary>
            <param name="jt"></param>
            <param name="type"></param>
            <param name="propertyDic"></param>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.Foreach(Newtonsoft.Json.Linq.JToken,System.Type,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            遍历集合
            </summary>
            <param name="jt"></param>
            <param name="type"></param>
            <param name="propertyDic"></param>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetMainTag(System.Type)">
            <summary>
            获取主标签名称
            <para>默认为类型名称</para>
            </summary>
            <param name="type">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.HasTag(System.Reflection.MemberInfo)">
            <summary>
            是否包含标签
            </summary>
            <param name="element">目标成员</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.HasTag(System.Reflection.MemberInfo,System.String)">
            <summary>
            是否包含标签
            </summary>
            <param name="element">目标成员</param>
            <param name="name">标签名称</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.CreateDynamicObjectWithTag``1(``0)">
            <summary>
            获取动态类型
            </summary>
            <typeparam name="TOpenApiSchema"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetPropertysWithTagAndOther(System.Type,System.Boolean,System.String[])">
            <summary>
            获取属性集合
            </summary>
            <param name="type"></param>
            <param name="inherit">仅继承成员</param>
            <param name="otherTags">需要额外匹配的标签</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetPropertysWithTag(System.Type,System.String[])">
            <summary>
            获取属性集合
            </summary>
            <param name="type"></param>
            <param name="tags">标签集合</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetPropertysWithTag(System.Type,System.Boolean)">
            <summary>
            获取属性集合
            </summary>
            <param name="type"></param>
            <param name="inherit">仅继承成员</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetPropertysWithTags(System.Type,System.Boolean,System.String[])">
            <summary>
            获取属性集合
            </summary>
            <param name="type"></param>
            <param name="inherit">仅继承成员</param>
            <param name="tags">需要匹配的标签</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetNamesWithTag(System.Type,System.String[])">
            <summary>
            获取字段名称集合
            </summary>
            <param name="type"></param>
            <param name="tags">标签集合</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetNamesWithTag(System.Type,System.Boolean)">
            <summary>
            获取字段名称集合
            </summary>
            <param name="type"></param>
            <param name="inherit">仅继承成员</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetNamesWithTagAndOther(System.Type,System.Boolean,System.String[])">
            <summary>
            获取字段名称集合
            </summary>
            <param name="type"></param>
            <param name="inherit">仅继承成员</param>
            <param name="otherTags">需要额外匹配的标签</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetNamesWithTag(System.Type,System.String,System.Boolean)">
            <summary>
            获取字段名称集合
            </summary>
            <param name="type"></param>
            <param name="tag">标签</param>
            <param name="inherit">仅继承成员</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetNameAndValueWithTag``1(``0,System.Boolean)">
            <summary>
            获取字段名称和值集合
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="obj"></param>
            <param name="inherit">仅继承成员</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.Extention.SchemaExtention.GetOrNullForPropertyDic(System.Type,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            获取或创建架构属性信息
            </summary>
            <param name="type"></param>
            <param name="innerModel">处理内部模型</param>
            <param name="exceptionProperties">特别输出的属性</param>
            <param name="ignoreProperties">特别忽略的属性</param>
            <remarks>如果在特别输出参数和特别忽略参数中同时指定了同一个属性，那么最终不会输出该属性</remarks>
            <returns></returns>
        </member>
        <member name="T:Library.OpenApi.JsonSerialization.JsonExtension">
            <summary>
            Json相关拓展方法
            </summary>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiJson``1(``0,System.String[])">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="obj">需要序列化的对象</param>
            <param name="exceptionProperties">要例外输出的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiJson``1(System.Object,System.String[])">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="obj">需要序列化的对象</param>
            <param name="exceptionProperties">要例外输出的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiJsonIgnore``1(``0,System.String[])">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="obj">需要序列化的对象</param>
            <param name="ignoreProperties">忽略的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiJsonIgnore``1(System.Object,System.String[])">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="obj">需要序列化的对象</param>
            <param name="ignoreProperties">忽略的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiJson``1(System.Object,System.String[],System.String[])">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="obj">需要序列化的对象</param>
            <param name="exceptionProperties">要例外输出的属性</param>
            <param name="ignoreProperties">忽略的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiJsonSpecifyType``1(System.Object,System.ValueTuple{System.String,System.Collections.Generic.List{System.String}}[])">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="obj">需要序列化的对象</param>
            <param name="exceptionProperties">要例外输出的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiJsonIgnoreSpecifyType``1(System.Object,System.ValueTuple{System.String,System.Collections.Generic.List{System.String}}[])">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="obj">需要序列化的对象</param>
            <param name="ignoreProperties">忽略的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiJsonSpecifyType``1(System.Object,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="obj">需要序列化的对象</param>
            <param name="exceptionProperties">要例外输出的属性</param>
            <param name="ignoreProperties">忽略的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiObject``1(System.String,System.String[])">
            <summary>
            将Json字符串反序列化成对象
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="json">需要反序列化的Json字符串</param>
            <param name="exceptionProperties">要例外输出的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiObjectIgnore``1(System.String,System.String[])">
            <summary>
            将Json字符串反序列化成对象
            </summary>
            <param name="json">需要反序列化的Json字符串</param>
            <param name="ignoreProperties">忽略的属性</param>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiObject``1(System.String,System.String[],System.String[])">
            <summary>
            将Json字符串反序列化成对象
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="json">需要反序列化的Json字符串</param>
            <param name="exceptionProperties">要例外输出的属性</param>
            <param name="ignoreProperties">忽略的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiObjectSpecifyType``1(System.String,System.ValueTuple{System.String,System.Collections.Generic.List{System.String}}[])">
            <summary>
            将Json字符串反序列化成对象
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="json">需要反序列化的Json字符串</param>
            <param name="exceptionProperties">要例外输出的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiObjectIgnoreSpecifyType``1(System.String,System.ValueTuple{System.String,System.Collections.Generic.List{System.String}}[])">
            <summary>
            将Json字符串反序列化成对象
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="json">需要反序列化的Json字符串</param>
            <param name="ignoreProperties">忽略的属性</param>
            <returns></returns>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonExtension.ToOpenApiObject``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            将Json字符串反序列化成对象
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
            <param name="json">需要反序列化的Json字符串</param>
            <param name="exceptionProperties">特别输出的属性</param>
            <param name="ignoreProperties">特别忽略的属性</param>
            <remarks>如果在特别输出参数和特别忽略参数中同时指定了同一个属性，那么最终不会输出该属性</remarks>
            <returns></returns>
        </member>
        <member name="T:Library.OpenApi.JsonSerialization.JsonPropertyContractResolver`1">
            <summary>
            自定义分解器
            </summary>
            <typeparam name="TOpenApiSchema">指定接口架构类型</typeparam>
        </member>
        <member name="F:Library.OpenApi.JsonSerialization.JsonPropertyContractResolver`1.PropertyDic">
            <summary>
            输出的属性
            </summary>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonPropertyContractResolver`1.#ctor(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            
            </summary>
            <param name="exceptionProperties">特别输出的属性</param>
            <param name="ignoreProperties">特别忽略的属性</param>
        </member>
        <member name="M:Library.OpenApi.JsonSerialization.JsonPropertyContractResolver`1.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            创建属性
            </summary>
            <param name="type"></param>
            <param name="memberSerialization"></param>
            <returns></returns>
        </member>
    </members>
</doc>
