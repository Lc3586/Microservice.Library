<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microservice.Library.DataAccess</name>
    </assembly>
    <members>
        <member name="T:Microservice.Library.DataAccess.DbFactory">
            <summary>
            数据库工厂
            <para>请先进行配置</para>
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.DbFactory.GetRepository(System.String,System.String,System.Nullable{Microservice.Library.DataRepository.DatabaseType})">
            <summary>
            根据配置文件获取数据库类型，并返回对应的工厂接口
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="entityAssembly">实体类命名空间</param>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.DbFactory.DbTypeStrToDbType(System.String)">
            <summary>
            将数据库类型字符串转换为对应的数据库类型
            </summary>
            <param name="dbTypeStr">数据库类型字符串</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.DbFactory.DbTypeToDbTypeStr(Microservice.Library.DataRepository.DatabaseType)">
            <summary>
            将数据库类型转换为对应的数据库类型字符串
            </summary>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.DataAccess.DbHelperFactory">
            <summary>
            描述：数据库帮助类工厂
            作者：Coldairarrow
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.DbHelperFactory.GetDbHelper(System.Nullable{Microservice.Library.DataRepository.DatabaseType},System.String)">
            <summary>
            获取指定的数据库帮助类
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="conStr">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.DbHelperFactory.GetDbHelper(System.String,System.String)">
            <summary>
            获取指定的数据库帮助类
            </summary>
            <param name="dbTypeStr">数据库类型字符串</param>
            <param name="conStr">连接字符串</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.DataAccess.DbOption">
            <summary>
            Db配置
            </summary>
        </member>
        <member name="F:Microservice.Library.DataAccess.DbOption.Option">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.DbOption.Configure(System.Action{Microservice.Library.DataAccess.DbOption})">
            <summary>
            配置
            </summary>
            <param name="setupAction"></param>
        </member>
        <member name="P:Microservice.Library.DataAccess.DbOption.DbType">
            <summary>
            数据库类型
            <para>默认MySql</para>
            </summary>
        </member>
        <member name="P:Microservice.Library.DataAccess.DbOption.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Microservice.Library.DataAccess.DbOption.Timeout">
            <summary>
            超时时间
            <para>默认5分钟</para>
            </summary>
        </member>
        <member name="P:Microservice.Library.DataAccess.DbOption.EntityAssembly">
            <summary>
            实体类命名空间
            </summary>
        </member>
        <member name="T:Microservice.Library.DataAccess.Extention">
            <summary>
            拓展
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.Extention.ToSharding``1(System.Linq.IQueryable{``0})">
            <summary>
            转为Sharding
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.Extention.ToSharding(Microservice.Library.DataRepository.IRepository)">
            <summary>
            转为Sharding
            </summary>
            <param name="db">数据源</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.DataAccess.ShardingConfig">
            <summary>
            分库分表读写分离配置
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingConfig.#ctor">
            <summary>
            私有构造函数
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingConfig.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingConfig.Init">
            <summary>
            初始化配置
            </summary>
        </member>
        <member name="P:Microservice.Library.DataAccess.ShardingConfig.Instance">
            <summary>
            获取实例
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingConfig.IsSharding``1">
            <summary>
            是否启用
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingConfig.AddDataSource(System.String,Microservice.Library.DataRepository.DatabaseType,System.Collections.Generic.List{System.ValueTuple{System.String,Microservice.Library.DataAccess.ReadWriteType}})">
            <summary>
            添加数据源
            </summary>
            <param name="dataSourceName">数据源名</param>
            <param name="dbType">数据库类型</param>
            <param name="dbs">一组读写数据库</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingConfig.AddAbsDatabase(System.String,System.Collections.Generic.List{Microservice.Library.DataAccess.AbstractTable})">
            <summary>
            添加抽象数据库
            </summary>
            <param name="absDbName">抽象数据库名</param>
            <param name="tables">抽象数据表</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingConfig.GetReadTables(System.String,System.String)">
            <summary>
            获取读表
            </summary>
            <param name="absTableName"></param>
            <param name="absDbName">抽象数据库名</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingConfig.GetTheWriteTable(System.String,System.Object,System.String)">
            <summary>
            获取特定写表
            </summary>
            <param name="absTableName">抽象表名</param>
            <param name="obj">实体对象</param>
            <param name="absDbName">抽象数据库名</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingConfig.GetAllWriteTables(System.String,System.String)">
            <summary>
            获取所有的写表
            </summary>
            <param name="absTableName">抽象表名</param>
            <param name="absDbName">抽象数据库名</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.DataAccess.ReadWriteType">
            <summary>
            读写类型
            </summary>
        </member>
        <member name="T:Microservice.Library.DataAccess.DataSource">
            <summary>
            数据源
            注：一组读写数据库为一个数据源,它们中表结构一致,需要开启主从复制或主主复制
            </summary>
        </member>
        <member name="T:Microservice.Library.DataAccess.AbstractDatabse">
            <summary>
            抽象数据库
            注：即将所有读库与写库视为同一个整体数据库
            </summary>
        </member>
        <member name="T:Microservice.Library.DataAccess.AbstractTable">
            <summary>
            抽象表
            注：属于抽象数据库
            </summary>
        </member>
        <member name="T:Microservice.Library.DataAccess.ShardingConfigBootstrapper">
            <summary>
            分库分表配置生成器
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingConfigBootstrapper.Bootstrap">
            <summary>
            引导
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.IShardingConfigBuilder.Build">
            <summary>
            生成配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.IAddDataSource.AddDataSource(System.String,Microservice.Library.DataRepository.DatabaseType,System.Action{Microservice.Library.DataAccess.IAddPhysicDb})">
            <summary>
            添加数据源
            </summary>
            <param name="dataSourceName">数据源名</param>
            <param name="dbType">数据库类型</param>
            <param name="physicDbBuilder">物理表构造器</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.IAddPhysicDb.AddPhsicDb(System.String,Microservice.Library.DataAccess.ReadWriteType)">
            <summary>
            添加物理数据库
            </summary>
            <param name="conString">连接字符串</param>
            <param name="opType">数据库类型</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.IAddAbstractTable.AddAbsTable(System.String,System.Action{Microservice.Library.DataAccess.IAddPhysicTable},System.Func{System.Object,System.String})">
            <summary>
            添加抽象表
            </summary>
            <param name="absTableName">抽象表名</param>
            <param name="physicTableBuilder">物理表构造器</param>
            <param name="findTable">分表规则</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.IAddAbstractTable.AddAbsTable(System.String,System.Action{Microservice.Library.DataAccess.IAddPhysicTable},Microservice.Library.DataAccess.IShardingRule)">
            <summary>
            添加抽象表
            </summary>
            <param name="absTableName">抽象表名</param>
            <param name="physicTableBuilder">物理表构造器</param>
            <param name="rule">找表规则</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.IAddPhysicTable.AddPhsicTable(System.String,System.String)">
            <summary>
            添加物理表
            </summary>
            <param name="physicTableName">物理表名</param>
            <param name="dataSourceName">数据源名</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.IAddAbstractDatabse.AddAbsDb(System.String,System.Action{Microservice.Library.DataAccess.IAddAbstractTable})">
            <summary>
            添加抽象数据库
            </summary>
            <param name="absDbName">抽象数据库名</param>
            <param name="absTableBuilder">抽象表构造器</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingHelper.MapTable(System.Type,System.String)">
            <summary>
            映射物理表
            </summary>
            <param name="absTable">抽象表类型</param>
            <param name="targetTableName">目标物理表名</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.Insert``1(``0)">
            <summary>
            添加单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.Insert``1(System.Collections.Generic.List{``0})">
            <summary>
            添加多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.DeleteAll``1">
            <summary>
            删除所有记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.Delete``1(``0)">
            <summary>
            删除单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.Delete``1(System.Collections.Generic.List{``0})">
            <summary>
            删除多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            按条件删除记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="condition">筛选条件</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.Update``1(``0)">
            <summary>
            更新单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.Update``1(System.Collections.Generic.List{``0})">
            <summary>
            更新多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.UpdateAny``1(``0,System.Collections.Generic.List{System.String})">
            <summary>
            更新单条记录的某些属性
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
            <param name="properties">属性</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.UpdateAny``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.String})">
            <summary>
            更新多条记录的某些属性
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
            <param name="properties">属性</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.UpdateWhere``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{``0})">
            <summary>
            按照条件更新记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="whereExpre">筛选条件</param>
            <param name="set">更新操作</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.GetIShardingQueryable``1">
            <summary>
            获取IShardingQueryable
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.GetList``1">
            <summary>
            获取所有数据
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.DataAccess.ShardingRepository.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Microservice.Library.DataAccess.ConsistentHashShardingRule">
            <summary>
            一致性HASH分片规则
            优点:数据扩容时数据迁移量较小,表越多扩容效果越明显
            缺点:扩容时需要进行数据迁移,比较复杂
            建议:若雪花分片不满足则采用本方案,此方案为分片规则中的"核弹"
            </summary>
        </member>
        <member name="T:Microservice.Library.DataAccess.IShardingRule">
            <summary>
            分片规则接口
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.IShardingRule.FindTable(System.Object)">
            <summary>
            找表方法
            </summary>
            <param name="obj">实体对象</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.DataAccess.ModShardingRule">
            <summary>
            取模分片规则
            说明:根据某字段的HASH,然后取模后得到表名后缀
            举例:Base_User_0,Base_User为抽象表名,_0为后缀
            警告:使用简单,但是扩容后需要大量数据迁移,不推荐使用
            </summary>
        </member>
        <member name="T:Microservice.Library.DataAccess.SnowflakeModShardingRule">
            <summary>
            基于雪花Id的mod分片,具体的规则请参考此本写法
            优点:数据扩容无需数据迁移,以时间轴进行扩容
            缺点:可能会存在数据热点问题
            建议:推荐使用此分片规则,易于使用
            </summary>
        </member>
        <member name="T:Microservice.Library.DataAccess.DistributedTransaction">
            <summary>
            数据库分布式事务,跨库事务
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.DistributedTransaction.#ctor(Microservice.Library.DataRepository.IRepository[])">
            <summary>
            构造函数
            </summary>
            <param name="repositories">其它数据仓储</param>
        </member>
        <member name="M:Microservice.Library.DataAccess.DistributedTransaction.CommitTransaction">
            <summary>
            提交事物
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.DistributedTransaction.RollbackTransaction">
            <summary>
            回滚事物
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.DistributedTransaction.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Microservice.Library.DataAccess.DistributedTransactionFactory">
            <summary>
            分布式事务工厂
            </summary>
        </member>
        <member name="M:Microservice.Library.DataAccess.DistributedTransactionFactory.GetDistributedTransaction(Microservice.Library.DataRepository.IRepository[])">
            <summary>
            获取分布式事务
            </summary>
            <param name="repositories">多个仓储</param>
            <returns></returns>
        </member>
    </members>
</doc>
