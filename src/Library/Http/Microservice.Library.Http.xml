<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microservice.Library.Http</name>
    </assembly>
    <members>
        <member name="M:Microservice.Library.Http.HttpExtension.ContainsFilter``1(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            是否拥有某过滤器
            </summary>
            <typeparam name="T">过滤器类型</typeparam>
            <param name="actionExecutingContext">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpExtension.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            判断是否为AJAX请求
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpExtension.GetDisplayUrlNoQuery(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取去掉查询参数的Url
            </summary>
            <param name="req">请求</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpExtension.GetToken(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取Token
            </summary>
            <param name="req">请求</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpExtension.GetJWTPayload(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取Token中的Payload
            </summary>
            <param name="req">请求</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.Http.HttpHelper">
            <summary>
            Http请求操作帮助类
            <!--已更新至2019-11-18 https://github.com/Coldairarrow/Colder.Admin.AntdVue -->
            </summary>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.GetData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起GET请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.GetDataWithState(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起GET请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.PostData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,Microservice.Library.Http.ContentType,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起POST请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="contentType">请求的ContentType</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.PostDataWithState(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,Microservice.Library.Http.ContentType,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起POST请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="contentType">请求的ContentType</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.PostData(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32,System.Int32)">
            <summary>
            发起POST请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="body">请求体</param>
            <param name="contentType">请求的ContentType</param>
            <param name="headers">请求头</param>
            <param name="cerFile">证书</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.PostDataWithState(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32,System.Int32)">
            <summary>
            发起POST请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="body">请求体</param>
            <param name="contentType">请求的ContentType</param>
            <param name="headers">请求头</param>
            <param name="cerFile">证书</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.RequestData(Microservice.Library.Http.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,Microservice.Library.Http.ContentType,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            请求数据
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="method">请求方法</param>
            <param name="url">URL地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头信息</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="contentType">请求数据类型</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.RequestData(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            请求数据
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="method">请求方法</param>
            <param name="url">请求地址</param>
            <param name="body">请求的body内容</param>
            <param name="contentType">请求数据类型</param>
            <param name="headers">请求头</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.GetAllRequestParams(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取所有请求的参数（包括get参数和post参数）
            </summary>
            <param name="context">请求上下文</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.BuildGetFullUrl(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            构建完全Url
            </summary>
            <param name="url">Url</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.GetHtml(System.String)">
            <summary>
            从URL获取html文档
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.SafeSignRequest(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            发起安全签名请求
            注：使用本框架签名算法,ContentType为application/json
            </summary>
            <param name="url">地址</param>
            <param name="body">请求body</param>
            <param name="appId">应用Id</param>
            <param name="appSecret">应用密钥</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.BuildApiSign(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            生成接口签名sign
            注：md5(appId+time+guid+body+appSecret)
            </summary>
            <param name="appId">应用Id</param>
            <param name="appSecret">应用密钥</param>
            <param name="guid">唯一GUID</param>
            <param name="time">时间</param>
            <param name="body">请求体</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.Http.HttpMethod">
            <summary>
            Http请求方法定义
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.ContentType.Form">
            <summary>
            传统Form表单,即application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.ContentType.Json">
            <summary>
            使用Json,即application/json
            </summary>
        </member>
        <member name="T:Microservice.Library.Http.IpHelper">
            <summary>
            Ip地址帮助类
            </summary>
        </member>
        <member name="M:Microservice.Library.Http.IpHelper.GetLocalIp">
            <summary>
            获取本地IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.IpHelper.GetFirstAvailablePort">
            <summary>
            获取第一个可用的端口号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.IpHelper.PortIsAvailable(System.Int32)">
            <summary>
            检查指定端口是否已用
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.IpHelper.PortIsUsed">
            <summary>
            获取操作系统已用的端口号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.JWTHelper.GetToken(System.String,System.String)">
            <summary>
            生成Token
            </summary>
            <param name="payloadJsonStr">数据JSON字符串</param>
            <param name="secret">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.JWTHelper.GetPayload(System.String)">
            <summary>
            获取Token中的数据
            </summary>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.JWTHelper.GetPayload``1(System.String)">
            <summary>
            获取Token中的数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.JWTHelper.CheckToken(System.String,System.String)">
            <summary>
            校验Token
            </summary>
            <param name="token">token</param>
            <param name="secret">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.PathHelper.GetUrl(System.String)">
            <summary>
            获取Url
            </summary>
            <param name="virtualUrl">虚拟Url</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.PathHelper.GetAbsolutePath(System.String)">
            <summary>
            获取绝对路径
            </summary>
            <param name="virtualPath">虚拟路径</param>
            <returns></returns>
        </member>
    </members>
</doc>
