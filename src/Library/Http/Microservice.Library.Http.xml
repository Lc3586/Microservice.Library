<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microservice.Library.Http</name>
    </assembly>
    <members>
        <member name="T:Microservice.Library.Http.Geetest.GeetestConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microservice.Library.Http.Geetest.GeetestLib">
            <summary>
            GeetestLib 极验验证C# SDK基本库
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.version">
            <summary>
            SDK版本号
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.sdkLang">
            <summary>
            SDK开发语言
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.apiUrl">
            <summary>
            极验验证API URL
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.registerUrl">
            <summary>
            register url
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.validateUrl">
            <summary>
            validate url
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.gtServerStatusSessionKey">
            <summary>
            极验验证API服务状态Session Key
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.fnGeetestChallenge">
            <summary>
            极验验证二次验证表单数据 Chllenge
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.fnGeetestValidate">
            <summary>
            极验验证二次验证表单数据 Validate
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.fnGeetestSeccode">
            <summary>
            极验验证二次验证表单数据 Seccode
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.successResult">
            <summary>
            验证成功结果字符串
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.failResult">
            <summary>
            证结失败验果字符串
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.Geetest.GeetestLib.forbiddenResult">
            <summary>
            判定为机器人结果字符串
            </summary>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            GeetestLib构造函数
            </summary>
            <param name="publicKey">极验验证公钥</param>
            <param name="privateKey">极验验证私钥</param>
            <param name="timeout"></param>
            <param name="proxy"></param>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.GetRandomNum">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.PreProcess(System.String,System.String,System.String)">
            <summary>
            验证初始化预处理
            </summary>
            <returns>初始化结果</returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.GetResponseStr">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.GetFailPreProcessRes">
            <summary>
            预处理失败后的返回格式串
            </summary>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.GetSuccessPreProcessRes(System.String)">
            <summary>
            预处理成功后的标准串
            </summary>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.FailbackValidateRequest(System.String,System.String,System.String)">
            <summary>
            failback模式的验证方式
            </summary>
            <param name="challenge">failback模式下用于与validate一起解码答案， 判断验证是否正确</param>
            <param name="validate">failback模式下用于与challenge一起解码答案， 判断验证是否正确</param>
            <param name="seccode">failback模式下，其实是个没用的参数</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.EnhencedValidateRequest(System.String,System.String,System.String)">
            <summary>
            向gt-server进行二次验证
            </summary>
            <param name="challenge">本次验证会话的唯一标识</param>
            <param name="validate">拖动完成后server端返回的验证结果标识字符串</param>
            <param name="seccode">验证结果的校验码，如果gt-server返回的不与这个值相等则表明验证失败</param>
            <returns>二次验证结果</returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.EnhencedValidateRequest(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="challenge"></param>
            <param name="validate"></param>
            <param name="seccode"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.ReadContentFromGet(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.RegisterChallenge">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.CheckResultByPrivate(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="validate"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.PostValidate(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.Md5Encode(System.String)">
            <summary>
            
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.Geetest.GeetestLib.Failback_check_result(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="challenge"></param>
            <param name="validate"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpExtension.ContainsFilter``1(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            是否拥有某过滤器
            </summary>
            <typeparam name="T">过滤器类型</typeparam>
            <param name="actionExecutingContext">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpExtension.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            判断是否为AJAX请求
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpExtension.GetDisplayUrlNoQuery(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取去掉查询参数的Url
            </summary>
            <param name="req">请求</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpExtension.GetToken(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取Token
            </summary>
            <param name="req">请求</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpExtension.GetJWTPayload(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取Token中的Payload
            </summary>
            <param name="req">请求</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.Http.HttpHelper">
            <summary>
            Http请求操作帮助类
            <!--已更新至2019-11-18 https://github.com/Coldairarrow/Colder.Admin.AntdVue -->
            </summary>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.GetData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起GET请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.GetDataWithState(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起GET请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.PostData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,Microservice.Library.Http.ContentType,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起POST请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="contentType">请求的ContentType</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.PostDataWithState(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,Microservice.Library.Http.ContentType,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起POST请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="contentType">请求的ContentType</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.PostData(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32,System.Int32)">
            <summary>
            发起POST请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="body">请求体</param>
            <param name="contentType">请求的ContentType</param>
            <param name="headers">请求头</param>
            <param name="cerFile">证书</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.PostDataWithState(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32,System.Int32)">
            <summary>
            发起POST请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="body">请求体</param>
            <param name="contentType">请求的ContentType</param>
            <param name="headers">请求头</param>
            <param name="cerFile">证书</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.RequestData(Microservice.Library.Http.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,Microservice.Library.Http.ContentType,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            请求数据
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="method">请求方法</param>
            <param name="url">URL地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头信息</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="contentType">请求数据类型</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.RequestData(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            请求数据
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="method">请求方法</param>
            <param name="url">请求地址</param>
            <param name="body">请求的body内容</param>
            <param name="contentType">请求数据类型</param>
            <param name="headers">请求头</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.GetAllRequestParams(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取所有请求的参数（包括get参数和post参数）
            </summary>
            <param name="context">请求上下文</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.BuildGetFullUrl(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            构建完全Url
            </summary>
            <param name="url">Url</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.GetHtml(System.String)">
            <summary>
            从URL获取html文档
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.SafeSignRequest(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            发起安全签名请求
            注：使用本框架签名算法,ContentType为application/json
            </summary>
            <param name="url">地址</param>
            <param name="body">请求body</param>
            <param name="appId">应用Id</param>
            <param name="appSecret">应用密钥</param>
            <param name="timeout">请求超时时间</param>
            <param name="readWriteTimeout">数据下载超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.HttpHelper.BuildApiSign(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            生成接口签名sign
            注：md5(appId+time+guid+body+appSecret)
            </summary>
            <param name="appId">应用Id</param>
            <param name="appSecret">应用密钥</param>
            <param name="guid">唯一GUID</param>
            <param name="time">时间</param>
            <param name="body">请求体</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.Http.HttpMethod">
            <summary>
            Http请求方法定义
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.ContentType.Form">
            <summary>
            传统Form表单,即application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="F:Microservice.Library.Http.ContentType.Json">
            <summary>
            使用Json,即application/json
            </summary>
        </member>
        <member name="T:Microservice.Library.Http.IpHelper">
            <summary>
            Ip地址帮助类
            </summary>
        </member>
        <member name="M:Microservice.Library.Http.IpHelper.GetLocalIp">
            <summary>
            获取本地IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.IpHelper.GetFirstAvailablePort">
            <summary>
            获取第一个可用的端口号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.IpHelper.PortIsAvailable(System.Int32)">
            <summary>
            检查指定端口是否已用
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.IpHelper.PortIsUsed">
            <summary>
            获取操作系统已用的端口号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.JWTHelper.GetToken(System.String,System.String)">
            <summary>
            生成Token
            </summary>
            <param name="payloadJsonStr">数据JSON字符串</param>
            <param name="secret">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.JWTHelper.GetPayload(System.String)">
            <summary>
            获取Token中的数据
            </summary>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.JWTHelper.GetPayload``1(System.String)">
            <summary>
            获取Token中的数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.JWTHelper.CheckToken(System.String,System.String)">
            <summary>
            校验Token
            </summary>
            <param name="token">token</param>
            <param name="secret">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.PathHelper.GetUrl(System.String)">
            <summary>
            获取Url
            </summary>
            <param name="virtualUrl">虚拟Url</param>
            <returns></returns>
        </member>
        <member name="M:Microservice.Library.Http.PathHelper.GetAbsolutePath(System.String)">
            <summary>
            获取绝对路径
            </summary>
            <param name="virtualPath">虚拟路径</param>
            <returns></returns>
        </member>
        <member name="T:Microservice.Library.Http.WebApp.ICacheStorage">
            <summary>
            缓存存储接口
            </summary>
        </member>
        <member name="M:Microservice.Library.Http.WebApp.ICacheStorage.SetCache(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">主键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Microservice.Library.Http.WebApp.ICacheStorage.GetCache(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Microservice.Library.Http.WebApp.ICacheStorage.RemoveCache(System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="T:Microservice.Library.Http.WebApp.SessionHelper">
            <summary>
            Session帮助类,自定义Session,解决原Session并发问题
            </summary>
        </member>
        <member name="P:Microservice.Library.Http.WebApp.SessionHelper.SessionCookieName">
            <summary>
            存放Session标志的Cookie名
            </summary>
        </member>
        <member name="P:Microservice.Library.Http.WebApp.SessionHelper.Session">
            <summary>
            当前Session
            </summary>
        </member>
        <member name="T:Microservice.Library.Http.WebApp.SessionHelper._Session">
            <summary>
            自定义_Session类
            </summary>
        </member>
    </members>
</doc>
