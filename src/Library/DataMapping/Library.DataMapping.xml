<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library.DataMapping</name>
    </assembly>
    <members>
        <member name="P:Library.DataMapping.Annotations.IMapAttribute.IsFrom">
            <summary>
            是否来源
            </summary>
        </member>
        <member name="P:Library.DataMapping.Annotations.IMapAttribute.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:Library.DataMapping.Annotations.MapFromAttribute">
            <summary>
            映射来源
            </summary>
        </member>
        <member name="M:Library.DataMapping.Annotations.MapFromAttribute.#ctor(System.Type[])">
            <summary>
            映射来源
            <para>如要设置成员映射选项, 请在类中设置公共的静态字段或属性<![CDATA[MemberMapOptions<TSource, TDestination> FromMemberMapOptions]]>, 并调用Add方法赋值</para>
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="P:Library.DataMapping.Annotations.MapFromAttribute.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:Library.DataMapping.Annotations.MapToAttribute">
            <summary>
            映射目标
            </summary>
        </member>
        <member name="M:Library.DataMapping.Annotations.MapToAttribute.#ctor(System.Type[])">
            <summary>
            映射目标
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="P:Library.DataMapping.Annotations.MapToAttribute.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Library.DataMapping.Application.AutoMapperGeneratorOptions.Types">
            <summary>
            类型集合
            </summary>
        </member>
        <member name="P:Library.DataMapping.Application.AutoMapperGeneratorOptions.EnableMapFrom">
            <summary>
            启用映射来源
            </summary>
        </member>
        <member name="P:Library.DataMapping.Application.AutoMapperGeneratorOptions.EnableMapTo">
            <summary>
            启用映射目标
            </summary>
        </member>
        <member name="T:Library.DataMapping.Application.MemberMapOptions`2">
            <summary>
            成员映射
            </summary>
            <remarks>必须设置为静态属性或字段</remarks>
        </member>
        <member name="P:Library.DataMapping.Application.MemberMapOptions`2.Options">
            <summary>
            映射选项
            </summary>
        </member>
        <member name="M:Library.DataMapping.Application.MemberMapOptions`2.Add(System.String,System.Action{AutoMapper.IMemberConfigurationExpression{`0,`1,System.Object}})">
            <summary>
            添加成员配置表达式
            </summary>
            <param name="name">名称</param>
            <param name="option">选项</param>
            <returns></returns>
        </member>
        <member name="M:Library.DataMapping.Application.MemberMapOptions`2.Add``1(System.String,System.Linq.Expressions.Expression{System.Func{System.Object,``0}})">
            <summary>
            添加成员映射表达式
            </summary>
            <param name="name">名称</param>
            <param name="option">选项</param>
            <returns></returns>
        </member>
        <member name="T:Library.DataMapping.Extention.MapExtention">
            <summary>
            拓展方法
            </summary>
        </member>
        <member name="M:Library.DataMapping.Extention.MapExtention.GetMemberMapOptions(System.Type,System.Boolean)">
            <summary>
            获取成员映射选项
            <para>默认为类型名称</para>
            </summary>
            <param name="type">目标对象</param>
            <param name="isFrom">是否为映射来源</param>
            <remarks>LCTR 2020-03-10</remarks>
            <returns></returns>
        </member>
        <member name="M:Library.DataMapping.Extention.MapExtention.CreateMap``1(AutoMapper.IMapperConfigurationExpression,System.Type)">
            <summary>
            配置Map
            </summary>
            <param name="configure"></param>
            <param name="type"></param>
        </member>
        <member name="T:Library.DataMapping.Extention.ParentChildrenMapping">
            <summary>
            父子数据相互映射类
            注：父子数据都必须唯一,即所有父键唯一,所有子键唯一,唯一的子键能确定对应的父键,唯一的父键能确定其拥有的子键集合,
            </summary>
        </member>
        <member name="M:Library.DataMapping.Extention.ParentChildrenMapping.AddChild(System.String,System.String)">
            <summary>
            添加子键
            </summary>
            <param name="parentId">所属父键</param>
            <param name="childId">子键</param>
        </member>
        <member name="M:Library.DataMapping.Extention.ParentChildrenMapping.RemoveChild(System.String,System.String)">
            <summary>
            删除子键
            </summary>
            <param name="parentId">所属父键</param>
            <param name="childId">子键</param>
        </member>
        <member name="M:Library.DataMapping.Extention.ParentChildrenMapping.RemoveParent(System.String)">
            <summary>
            删除父键
            注:会删除该父键以及该父键下面的所有子键
            </summary>
            <param name="parentId"></param>
        </member>
        <member name="M:Library.DataMapping.Extention.ParentChildrenMapping.ExistsParent(System.String)">
            <summary>
            父键是否存在
            </summary>
            <param name="parentId">父键</param>
            <returns></returns>
        </member>
        <member name="M:Library.DataMapping.Extention.ParentChildrenMapping.ExistsChild(System.String)">
            <summary>
            子键是否存在
            </summary>
            <param name="childId">子键</param>
            <returns></returns>
        </member>
        <member name="M:Library.DataMapping.Extention.ParentChildrenMapping.GetChildren(System.String)">
            <summary>
            获取父键拥有的所有子键
            </summary>
            <param name="parentId">父键</param>
            <returns></returns>
        </member>
        <member name="M:Library.DataMapping.Extention.ParentChildrenMapping.GetAllParents">
            <summary>
            获取所有父键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.DataMapping.Extention.ParentChildrenMapping.GetAllChildren">
            <summary>
            获取所有子键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.DataMapping.Extention.ParentChildrenMapping.GetParent(System.String)">
            <summary>
            获取父键
            </summary>
            <param name="childId">子键</param>
            <returns></returns>
        </member>
        <member name="M:Library.DataMapping.Gen.AutoMapperGenerator.GetMapper">
            <summary>
            获取映射器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.DataMapping.Gen.IAutoMapperProvider.GetMapper">
            <summary>
            获取映射器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Library.DataMapping.Gen.AutoMapperError">
            <summary>
            异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.DataMapping.Gen.AutoMapperError.#ctor(System.String,System.String)">
            <summary>
            异常
            </summary>
            <param name="title">标题</param>
            <param name="message">内容</param>
        </member>
        <member name="T:Library.DataMapping.Helper.AutoMapperHelper`2">
            <summary>
            AutoMapper帮助类
            </summary>
            <typeparam name="TSouurce"></typeparam>
            <typeparam name="TDestination"></typeparam>
        </member>
        <member name="T:Library.DataMapping.Helper.EmitHelper">
            <summary>
            Emit反射帮助类
            </summary>
        </member>
        <member name="M:Library.DataMapping.Helper.EmitHelper.CreateBuilder(System.Type)">
            <summary>
            创建对象建造者
            </summary>
            <param name="type">对象类型</param>
            <returns></returns>
        </member>
    </members>
</doc>
