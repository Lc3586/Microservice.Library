<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Business</name>
    </assembly>
    <members>
        <member name="T:Business.Filter.AdministratorOnlyAttribute">
            <summary>
            仅限管理员
            </summary>
        </member>
        <member name="M:Business.Filter.AdministratorOnlyAttribute.OnActionExecuting(Castle.DynamicProxy.IInvocation)">
            <summary>
            执行前
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Business.Filter.AdministratorOnlyAttribute.OnActionExecuted(Castle.DynamicProxy.IInvocation)">
            <summary>
            执行后
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:Business.Implementation.Common.EntryLogBusiness">
            <summary>
            档案操作记录业务类
            </summary>
        </member>
        <member name="T:Business.Implementation.Common.FileBusiness">
            <summary>
            文件处理业务类
            </summary>
        </member>
        <member name="F:Business.Implementation.Common.FileBusiness.PreviewDir">
            <summary>
            文件类型预览图存储路径根目录相对路径
            </summary>
        </member>
        <member name="P:Business.Implementation.Common.FileBusiness.BaseDir">
            <summary>
            存储路径根目录相对路径
            </summary>
        </member>
        <member name="P:Business.Implementation.Common.FileBusiness.BaseDirPath">
            <summary>
            存储路径根目录绝对路径
            </summary>
        </member>
        <member name="M:Business.Implementation.Common.FileBusiness.Save(System.Drawing.Image,System.String)">
            <summary>
            保存
            </summary>
            <param name="image">图像</param>
            <param name="path">绝对路径</param>
        </member>
        <member name="M:Business.Implementation.Common.FileBusiness.Save(System.Byte[],System.String)">
            <summary>
            保存
            </summary>
            <param name="bytes">文件</param>
            <param name="path">绝对路径</param>
        </member>
        <member name="M:Business.Implementation.Common.FileBusiness.GetPreviewImage(System.String)">
            <summary>
            获取预览图
            </summary>
            <param name="suffix">文件后缀</param>
            <returns></returns>
        </member>
        <member name="M:Business.Implementation.Common.FileBusiness.GetFileType(System.String)">
            <summary>
            获取文件类型
            </summary>
            <param name="suffix">文件后缀(.jpg)</param>
            <returns></returns>
        </member>
        <member name="M:Business.Implementation.Common.FileBusiness.ResponseImage(Microsoft.AspNetCore.Http.HttpResponse,System.Drawing.Image)">
            <summary>
            输出图片
            </summary>
            <param name="response"></param>
            <param name="img"></param>
        </member>
        <member name="M:Business.Implementation.Common.FileBusiness.ResponseFile(Microsoft.AspNetCore.Http.HttpResponse,System.String)">
            <summary>
            输出文件
            </summary>
            <param name="response"></param>
            <param name="path"></param>
        </member>
        <member name="M:Business.Implementation.Common.FileBusiness.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Business.Implementation.Common.OperationRecordBusiness">
            <summary>
            操作记录业务类
            </summary>
        </member>
        <member name="T:Business.Implementation.Common.WeChatOAuthHandler">
            <summary>
            微信用户信息业务类
            </summary>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.CreateWeChatUserInfo(System.String,System.String,System.String)">
            <summary>
            创建微信用户信息
            </summary>
            <param name="appId"></param>
            <param name="openId"></param>
            <param name="scope"></param>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.UpdateWeChatUserInfo(System.String,Senparc.Weixin.MP.AdvancedAPIs.OAuth.OAuthUserInfo)">
            <summary>
            更新微信用户信息
            </summary>
            <param name="appId"></param>
            <param name="userinfo"></param>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.GetWeChatUserInfo(System.String,System.String)">
            <summary>
            获取微信信息
            </summary>
            <param name="appId"></param>
            <param name="openId"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.GetMember(System.String,System.String)">
            <summary>
            获取会员信息
            </summary>
            <param name="appId"></param>
            <param name="openId"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.GetMember(System.String)">
            <summary>
            获取会员信息
            </summary>
            <param name="memberId">会员Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.SaveFile(System.String,System.String@)">
            <summary>
            保存外链文件
            </summary>
            <param name="uri">资源连接</param>
            <param name="fileId">文件Id</param>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.BindUser(System.String,System.String,System.String)">
            <summary>
            系统用户绑定微信
            </summary>
            <param name="userId">用户ID</param>
            <param name="appId"></param>
            <param name="openId"></param>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.UpdateUser(System.String,System.String,System.String)">
            <summary>
            更新系统用户信息
            </summary>
            <param name="userId">用户ID</param>
            <param name="appId"></param>
            <param name="openId"></param>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.BindMember(System.String,System.String,System.Boolean)">
            <summary>
            会员绑定微信
            </summary>
            <param name="appId"></param>
            <param name="openId"></param>
            <param name="autoCreate">会员不存在时自动创建会员</param>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.CreateMember(System.String,System.String,System.Boolean)">
            <summary>
            创建会员
            </summary>
            <param name="appId"></param>
            <param name="openId"></param>
            <param name="runTransaction">运行事务（默认运行）</param>
            <returns>返回会员信息</returns>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.UpdateMember(System.String,System.String,System.String)">
            <summary>
            更新会员信息
            </summary>
            <param name="memberId">会员ID</param>
            <param name="appId"></param>
            <param name="openId"></param>
        </member>
        <member name="M:Business.Implementation.Common.WeChatOAuthHandler.Login(Microsoft.AspNetCore.Http.HttpContext,Model.Utils.SampleAuthentication.SampleAuthenticationDTO.AuthenticationInfo,System.String)">
            <summary>
            登录
            </summary>
            <param name="context"></param>
            <param name="authenticationInfo"></param>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Implementation.Public.MemberBusiness">
            <summary>
            会员业务类
            </summary>
        </member>
        <member name="T:Business.Implementation.Services.Example.SampleBusiness">
            <summary>
            示例Soap服务业务类
            </summary>
        </member>
        <member name="T:Business.Implementation.System.AuthoritiesBusiness">
            <summary>
            权限业务类
            </summary>
        </member>
        <member name="T:Business.Implementation.System.MenuBusiness">
            <summary>
            菜单业务类
            </summary>
        </member>
        <member name="T:Business.Implementation.System.Operator">
            <summary>
            操作者
            </summary>
        </member>
        <member name="P:Business.Implementation.System.Operator.IsAuthenticated">
            <summary>
            是否已登录
            </summary>
        </member>
        <member name="P:Business.Implementation.System.Operator.AuthenticationInfo">
            <summary>
            当前操作者身份验证信息
            </summary>
        </member>
        <member name="P:Business.Implementation.System.Operator.UserInfo">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:Business.Implementation.System.Operator.IsAdmin">
            <summary>
            判断是否为管理员
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Implementation.System.ResourcesBusiness">
            <summary>
            资源业务类
            </summary>
        </member>
        <member name="T:Business.Implementation.System.RoleBusiness">
            <summary>
            角色业务类
            </summary>
        </member>
        <member name="T:Business.Implementation.System.UserBusiness">
            <summary>
            系统用户业务类
            </summary>
        </member>
        <member name="M:Business.Implementation.System.UserBusiness.InitAdmin">
            <summary>
            初始化超级管理员账号
            </summary>
        </member>
        <member name="T:Business.Interface.Common.IEntryLogBusiness">
            <summary>
            登录日志业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.Common.IEntryLogBusiness.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IEntryLogBusiness.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IEntryLogBusiness.Create(Entity.Common.Common_EntryLog)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <returns>登录日志Id</returns>
        </member>
        <member name="T:Business.Interface.Common.IFileBusiness">
            <summary>
            文件处理业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.GetDetails(System.String)">
            <summary>
            获取详情数据集合
            </summary>
            <param name="ids">id逗号拼接</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.GetDetails(System.Collections.Generic.List{System.String})">
            <summary>
            获取详情数据集合
            </summary>
            <param name="ids">id集合</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.CheckMD5(System.String)">
            <summary>
            MD5校验
            </summary>
            <param name="md5"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.SingleImage(Model.Common.FileDTO.ImageUploadParams)">
            <summary>
            单图上传
            </summary>
            <remarks>单个上传</remarks>
            <param name="option">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.SingleFile(Model.Common.FileDTO.FileUploadParams)">
            <summary>
            文件上传
            </summary>
            <remarks>单个上传</remarks>
            <param name="option">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.Preview(System.String)">
            <summary>
            预览
            </summary>
            <param name="id">文件Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.Browse(System.String)">
            <summary>
            浏览
            </summary>
            <param name="id">文件Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.Download(System.String)">
            <summary>
            下载
            </summary>
            <param name="id">文件Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IFileBusiness.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.Common.IOperationRecordBusiness">
            <summary>
            操作记录业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.Common.IOperationRecordBusiness.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IOperationRecordBusiness.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IOperationRecordBusiness.Create(Entity.Common.Common_OperationRecord)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <returns>操作记录Id</returns>
        </member>
        <member name="M:Business.Interface.Common.IOperationRecordBusiness.Create(System.Collections.Generic.List{Entity.Common.Common_OperationRecord})">
            <summary>
            新增
            </summary>
            <param name="datas">数据集合</param>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.Common.IWeChatUserInfoBusiness">
            <summary>
            微信用户信息业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.Common.IWeChatUserInfoBusiness.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IWeChatUserInfoBusiness.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Common.IWeChatUserInfoBusiness.GetState(Model.Common.WeChatUserInfoDTO.StateInfo)">
            <summary>
            获取State参数
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.Example.ISampleBusiness">
            <summary>
            示例业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.Example.ISampleBusiness.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Example.ISampleBusiness.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Example.ISampleBusiness.Create(Model.Example.DBDTO.Create)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Example.ISampleBusiness.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Example.ISampleBusiness.Edit(Model.Example.DBDTO.Edit)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Example.ISampleBusiness.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.Example.ISampleBusiness.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.System.IMemberBusiness">
            <summary>
            会员业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.System.IMemberBusiness.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMemberBusiness.DropdownList(System.String,Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取下拉框数据
            </summary>
            <param name="condition">关键词(多个用空格分隔)</param>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMemberBusiness.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMemberBusiness.Create(Model.Public.MemberDTO.Create,System.Boolean)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMemberBusiness.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMemberBusiness.Edit(Model.Public.MemberDTO.Edit,System.Boolean)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMemberBusiness.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMemberBusiness.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMemberBusiness.Login(System.String)">
            <summary>
            登录
            </summary>
            <param name="openId"></param>
        </member>
        <member name="M:Business.Interface.System.IMemberBusiness.GetOperatorDetail(System.String)">
            <summary>
            获取操作者详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.System.IAuthoritiesBusiness">
            <summary>
            权限业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.AutoAuthorizeRoleForUser(Model.System.AuthorizeDTO.RoleForUser,System.Boolean)">
            <summary>
            自动授权角色给用户
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.AutoAuthorizeRoleForMember(Model.System.AuthorizeDTO.RoleForMember,System.Boolean)">
            <summary>
            自动授权角色给会员
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.AuthorizeRoleForUser(Model.System.AuthorizeDTO.RoleForUser,System.Boolean)">
            <summary>
            授权角色给用户
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.AuthorizeRoleForMember(Model.System.AuthorizeDTO.RoleForMember,System.Boolean)">
            <summary>
            授权角色给会员
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.AuthorizeMenuForUser(Model.System.AuthorizeDTO.MenuForUser)">
            <summary>
            授权菜单给用户
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.AuthorizeResourcesForUser(Model.System.AuthorizeDTO.ResourcesForUser)">
            <summary>
            授权资源给用户
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.AuthorizeMenuForRole(Model.System.AuthorizeDTO.MenuForRole)">
            <summary>
            授权菜单给角色
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.AuthorizeResourcesForRole(Model.System.AuthorizeDTO.ResourcesForRole)">
            <summary>
            授权资源给角色
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationRoleForAllUser(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            撤销角色的全部系统用户授权
            </summary>
            <param name="roleIds">角色Id</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationRoleForAllMember(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            撤销角色的全部会员授权
            </summary>
            <param name="roleIds">角色Id</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationRoleForUser(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            撤销用户的全部角色授权
            </summary>
            <param name="userIds">用户Id</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationRoleForMember(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            撤销会员的全部角色授权
            </summary>
            <param name="memberIds">会员Id</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationMenuForUser(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            撤销用户的全部菜单授权
            </summary>
            <param name="userIds">用户Id</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationResourcesForUser(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            撤销用户的全部资源授权
            </summary>
            <param name="userIds">用户Id</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationMenuForRole(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            撤销角色的全部菜单授权
            </summary>
            <param name="roleIds">角色Id</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationResourcesForRole(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            撤销角色的全部资源授权
            </summary>
            <param name="roleIds">角色Id</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationRoleForUser(Model.System.AuthorizeDTO.RoleForUser,System.Boolean)">
            <summary>
            撤销用户的角色授权
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationRoleForMember(Model.System.AuthorizeDTO.RoleForMember,System.Boolean)">
            <summary>
            撤销会员的角色授权
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationMenuForUser(Model.System.AuthorizeDTO.MenuForUser,System.Boolean)">
            <summary>
            撤销用户的菜单授权
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationResourcesForUser(Model.System.AuthorizeDTO.ResourcesForUser,System.Boolean)">
            <summary>
            撤销用户的资源授权
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationMenuForRole(Model.System.AuthorizeDTO.MenuForRole,System.Boolean)">
            <summary>
            撤销角色的菜单授权
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationResourcesForRole(Model.System.AuthorizeDTO.ResourcesForRole,System.Boolean)">
            <summary>
            撤销角色的资源授权
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationMenuForAll(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            撤销所有用户和角色的菜单授权
            </summary>
            <param name="menuIds">菜单Id</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.RevocationResourcesForAll(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            撤销所有用户和角色的资源授权
            </summary>
            <param name="resourcesIds">资源Id</param>
            <param name="runTransaction">运行事务（默认运行）</param>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetUser(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取用户的授权数据
            </summary>
            <param name="userId">用户Id</param>
            <param name="includeRole">包括授权角色</param>
            <param name="includeMenu">包括授权菜单</param>
            <param name="includeResources">包括授权资源</param>
            <param name="mergeRoleMenu">合并角色的授权菜单</param>
            <param name="mergeRoleResources">合并角色的授权资源</param>
            <returns>
            <para>用户授权信息</para>
            <para>角色授权信息</para>
            <para>菜单授权信息</para>
            <para>资源授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetMember(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取会员的授权数据
            </summary>
            <param name="memberId">会员Id</param>
            <param name="includeRole">包括授权角色</param>
            <param name="includeMenu">包括授权菜单</param>
            <param name="includeResources">包括授权资源</param>
            <returns>
            <para>用户授权信息</para>
            <para>角色授权信息</para>
            <para>菜单授权信息</para>
            <para>资源授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetUserRole(System.String,System.Boolean,System.Boolean)">
            <summary>
            获取授权给用户的角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="includeMenu">包括授权菜单</param>
            <param name="includeResources">包括授权资源</param>
            <returns>
            <para>角色授权信息</para>
            <para>菜单授权信息</para>
            <para>资源授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetMemberRole(System.String,System.Boolean,System.Boolean)">
            <summary>
            获取授权给会员的角色
            </summary>
            <param name="memberId">会员Id</param>
            <param name="includeMenu">包括授权菜单</param>
            <param name="includeResources">包括授权资源</param>
            <returns>
            <para>角色授权信息</para>
            <para>菜单授权信息</para>
            <para>资源授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetUserMenu(System.String,System.Boolean)">
            <summary>
            获取授权给用户的菜单
            </summary>
            <param name="userId">用户Id</param>
            <param name="mergeRoleMenu">包括角色的授权菜单</param>
            <returns>
            <para>菜单授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetMemberMenu(System.String)">
            <summary>
            获取授权给会员的菜单
            </summary>
            <param name="memberId">会员Id</param>
            <returns>
            <para>菜单授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetUserResources(System.String,System.Boolean)">
            <summary>
            获权授权给用户的资源
            </summary>
            <param name="userId">用户Id</param>
            <param name="mergeRoleResources">包括角色的授权资源</param>
            <returns>
            <para>资源授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetMemberResources(System.String)">
            <summary>
            获权授权给会员的资源
            </summary>
            <param name="memberId">会员Id</param>
            <returns>
            <para>资源授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetRole(System.String,System.Boolean,System.Boolean)">
            <summary>
            获取角色的授权数据
            </summary>
            <param name="roleId">角色Id</param>
            <param name="includeMenu">包括授权菜单</param>
            <param name="includeResources">包括授权资源</param>
            <returns>
            <para>角色授权信息</para>
            <para>菜单授权信息</para>
            <para>资源授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetRoleMenu(System.String)">
            <summary>
            获取授权给角色的菜单
            </summary>
            <param name="roleId">角色Id</param>
            <returns>
            <para>菜单授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.GetRoleResources(System.String)">
            <summary>
            获取授权给角色的资源
            </summary>
            <param name="roleId">角色Id</param>
            <returns>
            <para>资源授权信息</para>
            </returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.IsAdminUser(System.String)">
            <summary>
            是否为管理员
            </summary>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.IsAdminRole(System.String)">
            <summary>
            是否为管理角色
            </summary>
            <param name="roleId">角色Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.UserHasRole(System.String,System.String)">
            <summary>
            用户是否拥有角色授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleId">角色Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.MemberHasRole(System.String,System.String)">
            <summary>
            会员是否拥有角色授权
            </summary>
            <param name="memberId">会员Id</param>
            <param name="roleId">角色Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.UserHasMenu(System.String,System.String)">
            <summary>
            用户是否拥有菜单授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="menuId">菜单Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.UserHasMenuUri(System.String,System.String)">
            <summary>
            用户是否拥有菜单授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="menuUri">菜单链接</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.MemberHasMenu(System.String,System.String)">
            <summary>
            会员是否拥有菜单授权
            </summary>
            <param name="memberId">会员Id</param>
            <param name="menuId">菜单Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.MemberHasMenuUri(System.String,System.String)">
            <summary>
            会员是否拥有菜单授权
            </summary>
            <param name="memberId">会员Id</param>
            <param name="menuUri">菜单链接</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.UserHasResources(System.String,System.String)">
            <summary>
            用户是否拥有资源授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="resourcesId">资源Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.UserHasResourcesUri(System.String,System.String)">
            <summary>
            用户是否拥有资源授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="resourcesUri">资源链接</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.MemberHasResources(System.String,System.String)">
            <summary>
            会员是否拥有资源授权
            </summary>
            <param name="memberId">会员Id</param>
            <param name="resourcesId">资源Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IAuthoritiesBusiness.MemberHasResourcesUri(System.String,System.String)">
            <summary>
            会员是否拥有资源授权
            </summary>
            <param name="memberId">会员Id</param>
            <param name="resourcesUri">资源链接</param>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.System.IMenuBusiness">
            <summary>
            菜单业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.System.IMenuBusiness.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMenuBusiness.GetTreeList(Model.System.MenuDTO.TreeListParamter,System.Boolean)">
            <summary>
            获取树状列表数据
            </summary>
            <param name="paramter">参数</param>
            <param name="deep">处于递归中</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMenuBusiness.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMenuBusiness.Create(Model.System.MenuDTO.Create)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMenuBusiness.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMenuBusiness.Edit(Model.System.MenuDTO.Edit)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMenuBusiness.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMenuBusiness.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMenuBusiness.Sort(Model.System.MenuDTO.Sort)">
            <summary>
            排序
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IMenuBusiness.DragSort(Model.System.MenuDTO.DragSort)">
            <summary>
            拖动排序
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.System.IOperator">
            <summary>
            操作者
            </summary>
        </member>
        <member name="P:Business.Interface.System.IOperator.IsAuthenticated">
            <summary>
            是否已登录
            </summary>
        </member>
        <member name="P:Business.Interface.System.IOperator.AuthenticationInfo">
            <summary>
            身份验证信息
            </summary>
        </member>
        <member name="P:Business.Interface.System.IOperator.UserInfo">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:Business.Interface.System.IOperator.IsAdmin">
            <summary>
            判断是否为管理员
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.System.IResourcesBusiness">
            <summary>
            资源业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.System.IResourcesBusiness.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IResourcesBusiness.DropdownList(System.String,Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取下拉框数据
            </summary>
            <param name="condition">关键词(多个用空格分隔)</param>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IResourcesBusiness.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IResourcesBusiness.Create(Model.System.ResourcesDTO.Create)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IResourcesBusiness.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IResourcesBusiness.Edit(Model.System.ResourcesDTO.Edit)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IResourcesBusiness.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IResourcesBusiness.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.System.IRoleBusiness">
            <summary>
            角色业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.System.IRoleBusiness.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IRoleBusiness.GetTreeList(Model.System.RoleDTO.TreeListParamter,System.Boolean)">
            <summary>
            获取树状列表数据
            </summary>
            <param name="paramter">参数</param>
            <param name="deep">处于递归中</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IRoleBusiness.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IRoleBusiness.Create(Model.System.RoleDTO.Create,System.Boolean)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IRoleBusiness.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IRoleBusiness.Edit(Model.System.RoleDTO.Edit)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IRoleBusiness.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IRoleBusiness.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IRoleBusiness.Sort(Model.System.RoleDTO.Sort)">
            <summary>
            排序
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IRoleBusiness.DragSort(Model.System.RoleDTO.DragSort)">
            <summary>
            拖动排序
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.System.IUserBusiness">
            <summary>
            系统用户业务接口类
            </summary>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.DropdownList(System.String,Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取下拉框数据
            </summary>
            <param name="condition">关键词(多个用空格分隔)</param>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.Create(Model.System.UserDTO.Create,System.Boolean)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.Edit(Model.System.UserDTO.Edit,System.Boolean)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <param name="runTransaction">运行事务（默认运行）</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.UpdatePassword(Model.System.UserDTO.UpdatePassword)">
            <summary>
            更新密码
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.Login(System.String,System.String)">
            <summary>
            登录
            </summary>
            <param name="account"></param>
            <param name="password"></param>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.Login(System.String)">
            <summary>
            登录
            </summary>
            <param name="openId"></param>
        </member>
        <member name="M:Business.Interface.System.IUserBusiness.GetOperatorDetail(System.String)">
            <summary>
            获取操作者详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Interface.Services.Example.ISampleBusiness">
            <summary>
            示例Soap服务接口类
            </summary>
        </member>
        <member name="T:Business.Utils.BaseBusiness">
            <summary>
            业务处理基类
            </summary>
            <remarks>
            原作者：Coldairarrow
            最近修改者：LCTR
            </remarks>
        </member>
        <member name="P:Business.Utils.BaseBusiness.Config">
            <summary>
            系统日志
            </summary>
        </member>
        <member name="P:Business.Utils.BaseBusiness.Operator">
            <summary>
            当前登录人
            </summary>
        </member>
        <member name="M:Business.Utils.BaseBusiness.GetPagination``1(System.Linq.IQueryable{``0},Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取分页后的数据
            </summary>
            <typeparam name="U">实体类型</typeparam>
            <param name="query">数据源IQueryable</param>
            <param name="pagination">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.BaseBusiness.GetPagination``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.String,Model.Utils.Pagination.SortType,System.Int32@,System.Int32@)">
            <summary>
            获取分页后的数据
            </summary>
            <typeparam name="U">实体参数</typeparam>
            <param name="query">IQueryable数据源</param>
            <param name="pageIndex">当前页</param>
            <param name="pageRows">每页行数</param>
            <param name="orderColumn">排序列</param>
            <param name="orderType">排序类型</param>
            <param name="count">总记录数</param>
            <param name="pages">总页数</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.BaseBusiness.Success">
            <summary>
            返回成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.BaseBusiness.Success``1(``0)">
            <summary>
            返回成功
            </summary>
            <param name="data">返回数据</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.BaseBusiness.Success``1(``0,System.String)">
            <summary>
            返回成功
            </summary>
            <param name="data">返回数据</param>
            <param name="msg">返回消息</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.BaseBusiness.Error">
            <summary>
            返回错误
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.BaseBusiness.Error(System.String)">
            <summary>
            返回错误
            </summary>
            <param name="msg">错误提示</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.BaseBusiness.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务。
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Business.Utils.CAS.CASHelper">
            <summary>
            CAS帮助类
            </summary>
        </member>
        <member name="M:Business.Utils.CAS.CASHelper.GetTGT(Model.Utils.CAS.CASDTO.GetTGT)">
            <summary>
            获取TGT
            </summary>
            <param name="getTGT"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.CAS.CASHelper.DeleteTGT(Model.Utils.CAS.CASDTO.LogOut)">
            <summary>
            删除TGT
            </summary>
            <param name="logOut"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.CAS.CASHelper.GetST(Model.Utils.CAS.CASDTO.GetST)">
            <summary>
            获取ST
            </summary>
            <param name="getST"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.CAS.CASHelper.GetUserInfo(Model.Utils.CAS.CASDTO.GetUserInfo)">
            <summary>
            获取用户信息
            </summary>
            <param name="getUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.CAS.CASHelper.GetTGT(System.String,System.String@)">
            <summary>
            解析html以获取tgt
            </summary>
            <param name="html">html字符串</param>
            <param name="tgt">tgt</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.CAS.CASHelper.GetUserInfo(System.String,Model.Utils.CAS.CASDTO.UserInfo@)">
            <summary>
            解析xml以获取用户信息
            </summary>
            <param name="xml">xml字符串</param>
            <param name="userInfo">用户信息</param>
            <returns></returns>
        </member>
        <member name="T:Business.Utils.EntityExtention">
            <summary>
            实体类拓展方法
            </summary>
        </member>
        <member name="M:Business.Utils.EntityExtention.InitEntityWithoutOP``1(``0)">
            <summary>
            初始化实体，不处理当前登录人
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.EntityExtention.InitEntity``1(``0,Model.Common.OperatorUserInfo)">
            <summary>
            初始化实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="operatorDetail"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.EntityExtention.ModifyEntityWithoutOP``1(``0)">
            <summary>
            修改实体，不处理当前登录人
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.EntityExtention.ModifyEntity``1(``0,Model.Common.OperatorUserInfo)">
            <summary>
            修改实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="operatorDetail"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.EntityExtention.GetUserName(Business.Interface.System.IOperator,Model.Common.OperatorUserInfo)">
            <summary>
            获取当前登录用户的用户名
            </summary>
            <param name="op"></param>
            <param name="operatorDetail"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Utils.ExceptionHelper">
            <summary>
            异常帮助类
            </summary>
        </member>
        <member name="M:Business.Utils.ExceptionHelper.ExceptionWriteLog(System.Exception,System.String,System.String,System.String)">
            <summary>
            处理系统异常
            </summary>
            <param name="exception">异常</param>
            <param name="url">请求地址</param>
            <param name="target">目标</param>
            <param name="method">方法</param>
        </member>
        <member name="M:Business.Utils.ExceptionHelper.HandleException(System.Exception,System.String,System.String,System.String)">
            <summary>
            处理系统异常
            </summary>
            <param name="exception">异常</param>
            <param name="url">请求地址</param>
            <param name="target">目标</param>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ExceptionHelper.HandleException(System.Exception,System.Exception)">
            <summary>
            处理系统异常
            </summary>
            <param name="exception">当前异常</param>
            <param name="base_exception">原异常</param>
            <returns></returns>
        </member>
        <member name="T:Business.Utils.IdHelper">
            <summary>
            雪花Id帮助类
            </summary>
        </member>
        <member name="M:Business.Utils.IdHelper.NextId">
            <summary>
            下一个Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.IdHelper.NextIdString">
            <summary>
            下一个Id
            <para>转字符类型</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.IdHelper.NextIdUpper">
            <summary>
            下一个Id
            <para>转大写</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.IdHelper.NextIdLower">
            <summary>
            下一个Id
            <para>转小写</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Utils.Kafka.KafkaConsume`2">
            <summary>
            kafka消费者类
            </summary>
            <typeparam name="TKey">标识</typeparam>
            <typeparam name="TValue">消息值</typeparam>
        </member>
        <member name="M:Business.Utils.Kafka.KafkaConsume`2.#ctor(Confluent.Kafka.ConsumerConfig)">
            <summary>
            
            </summary>
            <param name="config">配置</param>
        </member>
        <member name="F:Business.Utils.Kafka.KafkaConsume`2.Consumer">
            <summary>
            消费者
            </summary>
        </member>
        <member name="F:Business.Utils.Kafka.KafkaConsume`2.CTS">
            <summary>
            取消订阅令牌集合
            </summary>
        </member>
        <member name="F:Business.Utils.Kafka.KafkaConsume`2.ReceiveMessage">
            <summary>
            接收消息
            </summary>
            <remarks>
            <para>参数1: 订阅</para>
            <para>参数2: 消息</para>
            </remarks>
        </member>
        <member name="M:Business.Utils.Kafka.KafkaConsume`2.Subscribe(System.String[])">
            <summary>
            订阅
            </summary>
            <param name="topics">订阅</param>
        </member>
        <member name="M:Business.Utils.Kafka.KafkaConsume`2.Cancle(System.String[])">
            <summary>
            取消订阅
            </summary>
            <param name="topics">订阅</param>
        </member>
        <member name="M:Business.Utils.Kafka.KafkaConsume`2.Consume(System.String)">
            <summary>
            消费
            </summary>
            <param name="topic">订阅</param>
        </member>
        <member name="T:Business.Utils.Kafka.KafkaProducer`2">
            <summary>
            kafka生产者类
            </summary>
            <typeparam name="TKey">标识</typeparam>
            <typeparam name="TValue">消息值</typeparam>
        </member>
        <member name="M:Business.Utils.Kafka.KafkaProducer`2.#ctor(Confluent.Kafka.ProducerConfig)">
            <summary>
            
            </summary>
            <param name="config">配置</param>
        </member>
        <member name="F:Business.Utils.Kafka.KafkaProducer`2.Producer">
            <summary>
            生产者
            </summary>
        </member>
        <member name="F:Business.Utils.Kafka.KafkaProducer`2.CTS">
            <summary>
            取消生产令牌集合
            </summary>
        </member>
        <member name="M:Business.Utils.Kafka.KafkaProducer`2.Produce(System.String,System.Object,`1,System.TimeSpan)">
            <summary>
            生产
            </summary>
            <param name="topic">订阅</param>
            <param name="key">标识</param>
            <param name="messageValue">消息值</param>
            <param name="timeout">超时时间（默认10秒）</param>
        </member>
        <member name="T:Business.Utils.Log.ILogBusiness">
            <summary>
            日志业务接口类
            </summary>
        </member>
        <member name="M:Business.Utils.Log.ILogBusiness.GetDefaultType">
            <summary>
            获取默认的日志组件类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.Log.ILogBusiness.GetFileList(System.DateTime,System.DateTime)">
            <summary>
            获取日志文件列表
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.Log.ILogBusiness.GetFileContent(System.String)">
            <summary>
            获取日志文件内容
            </summary>
            <param name="filename">文件名</param>
        </member>
        <member name="M:Business.Utils.Log.ILogBusiness.GetESList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取ES数据列表
            </summary>
            <param name="pagination">排序、筛选以及数据量设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.Log.ILogBusiness.GetESDetail(System.String)">
            <summary>
            获取ES数据详情
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.Log.ILogBusiness.GetDBList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取数据库数据列表
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.Log.ILogBusiness.GetDBDetail(System.String)">
            <summary>
            获取数据库数据详情
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="T:Business.Utils.Log.LogBusiness">
            <summary>
            日志业务类
            </summary>
        </member>
        <member name="T:Business.Utils.MessageException">
            <summary>
            消息异常
            </summary>
        </member>
        <member name="M:Business.Utils.MessageException.#ctor(System.String,Model.Utils.Result.ErrorCode,System.Exception)">
            <summary>
            
            </summary>
            <param name="msg">消息</param>
            <param name="code">错误代码</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="P:Business.Utils.MessageException.Msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Business.Utils.MessageException.Code">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:Business.Utils.MessageException.InnerException">
            <summary>
            内部异常
            </summary>
        </member>
        <member name="T:Business.Utils.ValidationException">
            <summary>
            验证异常
            </summary>
        </member>
        <member name="M:Business.Utils.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="msg">消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Business.Utils.ValidationException.#ctor(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="data">数据</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Business.Utils.ValidationException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="msg">消息</param>
            <param name="data">数据</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="P:Business.Utils.ValidationException.Msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Business.Utils.ValidationException.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Business.Utils.ValidationException.InnerException">
            <summary>
            内部异常
            </summary>
        </member>
        <member name="T:Business.Utils.ModelErrorsInfo">
            <summary>
            模型验证错误信息
            </summary>
        </member>
        <member name="P:Business.Utils.ModelErrorsInfo.FullKey">
            <summary>
            全名
            </summary>
        </member>
        <member name="P:Business.Utils.ModelErrorsInfo.Key">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Business.Utils.ModelErrorsInfo.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Business.Utils.ModelErrorsInfo.Errors">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Business.Utils.ModelErrorsInfo.ErrorInfo">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="T:Business.Utils.Pagination.PaginationExtension">
            <summary>
            分页设置拓展方法
            </summary>
        </member>
        <member name="M:Business.Utils.Pagination.PaginationExtension.FilterToSql(Model.Utils.Pagination.PaginationDTO,System.String@,System.String)">
            <summary>
            筛选条件转sql语句
            </summary>
            <param name="pagination">分页设置</param>
            <param name="sql">sql语句</param>
            <param name="alias">别名</param>
            <returns>筛选条件是否有误</returns>
        </member>
        <member name="M:Business.Utils.Pagination.PaginationExtension.OrderByToSql(Model.Utils.Pagination.PaginationDTO,System.String@,System.String,System.Boolean)">
            <summary>
            排序条件转sql语句
            </summary>
            <param name="pagination">分页设置</param>
            <param name="sql">sql语句</param>
            <param name="alias">别名</param>
            <param name="withOrderByKeyword">附加orderby关键词</param>
            <returns>排序条件是否有误</returns>
        </member>
        <member name="M:Business.Utils.Pagination.PaginationExtension.FilterToLinqDynamic``1(Model.Utils.Pagination.PaginationDTO,System.Linq.IQueryable{``0}@)">
            <summary>
            筛选条件转动态linq
            </summary>
            <param name="pagination">分页设置</param>
            <param name="LinqDynamic">动态linq</param>
            <returns>筛选条件是否有误</returns>
        </member>
        <member name="M:Business.Utils.Pagination.PaginationExtension.OrderByToLinqDynamic``1(Model.Utils.Pagination.PaginationDTO,System.Linq.IQueryable{``0}@)">
            <summary>
            排序条件转动态linq
            </summary>
            <param name="pagination">分页设置</param>
            <typeparam name="TSource"></typeparam>
            <param name="LinqDynamic">动态linq</param>
            <returns>排序条件是否有误</returns>
        </member>
        <member name="T:Business.Utils.Pagination.PaginationFreeSqlExtension">
            <summary>
            分页设置FreeSql拓展方法
            </summary>
        </member>
        <member name="M:Business.Utils.Pagination.PaginationFreeSqlExtension.Filter``1(FreeSql.ISelect{``0},Model.Utils.Pagination.PaginationDTO,System.String)">
            <summary>
            过滤
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pagination">分页参数</param>
            <param name="alias">指定别名</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.Pagination.PaginationFreeSqlExtension.OrderBy``1(FreeSql.ISelect{``0},Model.Utils.Pagination.PaginationDTO,System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pagination">分页参数</param>
            <param name="alias">指定别名</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.Pagination.PaginationFreeSqlExtension.Filter``2(FreeSql.ISelectGrouping{``0,``1},Model.Utils.Pagination.PaginationDTO,System.String)">
            <summary>
            过滤
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="source"></param>
            <param name="pagination">分页参数</param>
            <param name="alias">指定别名</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.Pagination.PaginationFreeSqlExtension.OrderBy``2(FreeSql.ISelectGrouping{``0,``1},Model.Utils.Pagination.PaginationDTO,System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="source"></param>
            <param name="pagination">分页参数</param>
            <param name="alias">指定别名</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.Pagination.PaginationFreeSqlExtension.GetPagination``1(FreeSql.ISelect{``0},Model.Utils.Pagination.PaginationDTO,System.String)">
            <summary>
            获取分页后的数据
            </summary>
            <typeparam name="TReturn">实体类型</typeparam>
            <param name="source"></param>
            <param name="pagination">分页参数</param>
            <param name="alias">指定别名</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.Pagination.PaginationFreeSqlExtension.GetPagination``2(FreeSql.ISelectGrouping{``0,``1},Model.Utils.Pagination.PaginationDTO,System.String)">
            <summary>
            获取分页后的数据
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TReturn">实体类型</typeparam>
            <param name="source"></param>
            <param name="pagination">分页参数</param>
            <param name="alias">指定别名</param>
            <returns></returns>
        </member>
        <member name="T:Business.Utils.ReflectionHelper">
            <summary>
            通过反射调用方法
            LCTR 2019-06-19
            </summary>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.Invoke``1(``0,System.String,System.Object[])">
            <summary>
            调用方法
            </summary>
            <typeparam name="Class">目标类型</typeparam>
            <param name="obj">目标</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.Invoke``1(``0,System.String,System.Object[],System.Collections.Generic.List{Business.Utils.ModelErrorsInfo})">
            <summary>
            调用方法
            </summary>
            <typeparam name="Class">目标类型</typeparam>
            <param name="obj">目标</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="modelStateErrors">模型验证信息</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.Invoke``1(``0,System.String,System.Object[],System.Collections.Generic.List{Business.Utils.ModelErrorsInfo},Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            调用方法
            </summary>
            <typeparam name="Class">目标类型</typeparam>
            <param name="obj">目标</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="modelStateErrors">模型验证信息</param>
            <param name="request">请求信息</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.Invoke``1(``0,System.String,System.Object[],Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            调用方法
            </summary>
            <typeparam name="Class">目标类型</typeparam>
            <param name="obj">目标</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="request">请求信息</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.InvokeAsync``1(``0,System.String,System.Object[])">
            <summary>
            调用异步方法
            </summary>
            <typeparam name="Class">目标类型</typeparam>
            <param name="obj">目标</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.InvokeAsync``1(``0,System.String,System.Object[],System.Collections.Generic.List{Business.Utils.ModelErrorsInfo})">
            <summary>
            调用异步方法
            </summary>
            <typeparam name="Class">目标类型</typeparam>
            <param name="obj">目标</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="modelStateErrors">模型验证信息</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.InvokeAsync``1(``0,System.String,System.Object[],System.Collections.Generic.List{Business.Utils.ModelErrorsInfo},Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            调用异步方法
            </summary>
            <typeparam name="Class">目标类型</typeparam>
            <param name="obj">目标</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="modelStateErrors">模型验证信息</param>
            <param name="request">请求信息</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.InvokeAsync``1(``0,System.String,System.Object[],Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            调用异步方法
            </summary>
            <typeparam name="Class">目标类型</typeparam>
            <param name="obj">目标</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="request">请求信息</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.InvokeStatic(System.Type,System.String,System.Object[])">
            <summary>
            调用静态方法
            </summary>
            <param name="type">目标类型</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.InvokeStatic(System.Type,System.String,System.Object[],System.Collections.Generic.List{Business.Utils.ModelErrorsInfo})">
            <summary>
            调用静态方法
            </summary>
            <param name="type">目标类型</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="modelStateErrors">模型验证信息</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.InvokeStatic(System.Type,System.String,System.Object[],System.Collections.Generic.List{Business.Utils.ModelErrorsInfo},Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            调用静态方法
            </summary>
            <param name="type">目标类型</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="modelStateErrors">模型验证信息</param>
            <param name="request">请求信息</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.InvokeStatic(System.Type,System.String,System.Object[],Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            调用静态方法
            </summary>
            <param name="type">目标类型</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="request">请求信息</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.Invoke_Real``1(``0,System.String,System.Object[],System.Collections.Generic.List{Business.Utils.ModelErrorsInfo},Microsoft.AspNetCore.Http.HttpRequest,System.Boolean)">
            <summary>
            调用方法
            </summary>
            <typeparam name="Class">目标类型</typeparam>
            <param name="obj">目标</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="modelStateErrors">模型验证信息</param>
            <param name="request">请求信息</param>
            <param name="async">异步方法</param>
            <returns></returns>
        </member>
        <member name="M:Business.Utils.ReflectionHelper.InvokeStatic_Real(System.Type,System.String,System.Object[],System.Collections.Generic.List{Business.Utils.ModelErrorsInfo},Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            调用静态方法
            </summary>
            <param name="type">目标类型</param>
            <param name="Method">方法</param>
            <param name="parameters">参数</param>
            <param name="modelStateErrors">模型验证信息</param>
            <param name="request">请求信息</param>
            <returns></returns>
        </member>
    </members>
</doc>
