<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleApi.Api</name>
    </assembly>
    <members>
        <member name="T:Api.Configures.AutoMapperConfigura">
            <summary>
            AutoMapper配置类
            </summary>
        </member>
        <member name="M:Api.Configures.AutoMapperConfigura.RegisterAutoMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册AutoMapper服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.CacheConfigura">
            <summary>
            缓存配置类
            </summary>
        </member>
        <member name="M:Api.Configures.CacheConfigura.RegisterCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册缓存
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.CASConfigura">
            <summary>
            CAS配置类
            </summary>
        </member>
        <member name="M:Api.Configures.CASConfigura.RegisterCAS(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册CAS服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.Configures.CASConfigura.ConfiguraCAS(Microsoft.AspNetCore.Builder.IApplicationBuilder,Model.Utils.Config.SystemConfig)">
            <summary>
            配置CAS
            注：方法在UseMvc之前
            </summary>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.ConfigureSwaggerGenOptions">
            <summary>
            配置Swagger选项
            </summary>
            <remarks>当Api有多个版本时使用此类,将系统配置应用于Swagger配置</remarks>
        </member>
        <member name="M:Api.Configures.ConfigureSwaggerGenOptions.#ctor(System.IServiceProvider,Microsoft.Extensions.Options.IOptions{Model.Utils.Config.SwaggerApiMultiVersionDescriptionOptions})">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
            <param name="options"></param>
        </member>
        <member name="M:Api.Configures.ConfigureSwaggerGenOptions.Configure(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:Api.Configures.ElasticsearchConfigura">
            <summary>
            ES搜索服务配置类
            </summary>
        </member>
        <member name="M:Api.Configures.ElasticsearchConfigura.RegisterElasticsearch(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册ES搜索服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.FreeSqlConfigura">
            <summary>
            FreeSql配置类
            </summary>
        </member>
        <member name="M:Api.Configures.FreeSqlConfigura.RegisterFreeSql(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册FreeSql服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.Configures.FreeSqlConfigura.ConfiguraFreeSql(Microsoft.AspNetCore.Builder.IApplicationBuilder,Model.Utils.Config.SystemConfig)">
            <summary>
            配置FreeSql
            </summary>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.FreeSqlMultiDatabaseConfigura">
            <summary>
            FreeSql多数据库配置类
            </summary>
        </member>
        <member name="M:Api.Configures.FreeSqlMultiDatabaseConfigura.RegisterFreeSqlMultiDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册FreeSql多数据库服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.Configures.FreeSqlMultiDatabaseConfigura.ConfiguraFreeSqlMultiDatabase(Microsoft.AspNetCore.Builder.IApplicationBuilder,Model.Utils.Config.SystemConfig)">
            <summary>
            配置FreeSql多数据库服务
            </summary>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.KafkaConfigura">
            <summary>
            Kafka中间件配置类
            </summary>
        </member>
        <member name="M:Api.Configures.KafkaConfigura.RegisterKafka(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册Kafka中间件
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.Configures.KafkaConfigura.ConfiguraKafka(Microsoft.AspNetCore.Builder.IApplicationBuilder,Model.Utils.Config.SystemConfig)">
            <summary>
            配置Kafka中间件
            </summary>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.NLogConfigura">
            <summary>
            NLog配置类
            </summary>
        </member>
        <member name="M:Api.Configures.NLogConfigura.RegisterNLog(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册NLog服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.Configures.NLogConfigura.ConfiguraNLog(Microsoft.AspNetCore.Builder.IApplicationBuilder,Model.Utils.Config.SystemConfig)">
            <summary>
            配置NLog
            </summary>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.SampleAuthenticationConfigura">
            <summary>
            简易身份验证配置类
            </summary>
        </member>
        <member name="M:Api.Configures.SampleAuthenticationConfigura.RegisterSampleAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册简易身份验证服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.Configures.SampleAuthenticationConfigura.ConfiguraSampleAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Model.Utils.Config.SystemConfig)">
            <summary>
            配置简易身份验证
            注：方法在UseEndpoints之前调用
            </summary>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.SoapConfigure">
            <summary>
            Soap配置类
            </summary>
        </member>
        <member name="M:Api.Configures.SoapConfigure.RegisterSoap(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册Soap服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.Configures.SoapConfigure.ConfiguraSoap(Microsoft.AspNetCore.Builder.IApplicationBuilder,Model.Utils.Config.SystemConfig)">
            <summary>
            配置Soap
            </summary>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.SwaggerConfigura">
            <summary>
            Swagger单文档配置类
            </summary>
        </member>
        <member name="M:Api.Configures.SwaggerConfigura.RegisterSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册Swagger服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.Configures.SwaggerConfigura.ConfiguraSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder,Model.Utils.Config.SystemConfig)">
            <summary>
            配置Swagger
            </summary>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.SwaggerMultiVersionConfigura">
            <summary>
            Swagger多版本文档配置类
            </summary>
        </member>
        <member name="M:Api.Configures.SwaggerMultiVersionConfigura.RegisterSwaggerMultiVersion(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册Swagger多版本文档服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.Configures.SwaggerMultiVersionConfigura.ConfiguraSwaggerMultiVersion(Microsoft.AspNetCore.Builder.IApplicationBuilder,Model.Utils.Config.SystemConfig)">
            <summary>
            配置Swagger多版本文档
            </summary>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Configures.WeChatServiceConfigura">
            <summary>
            微信配置类
            </summary>
        </member>
        <member name="M:Api.Configures.WeChatServiceConfigura.RegisterWeChat(Microsoft.Extensions.DependencyInjection.IServiceCollection,Model.Utils.Config.SystemConfig)">
            <summary>
            注册WeChat服务
            </summary>
            <param name="services"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.Configures.WeChatServiceConfigura.ConfiguraWeChat(Microsoft.AspNetCore.Builder.IApplicationBuilder,Model.Utils.Config.SystemConfig)">
            <summary>
            配置WeChat
            </summary>
            <param name="app"></param>
            <param name="config"></param>
        </member>
        <member name="T:Api.Controllers.EntryLogController">
            <summary>
            登录日志接口
            </summary>
        </member>
        <member name="M:Api.Controllers.EntryLogController.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.EntryLogController.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.FileController">
            <summary>
            文件处理接口
            </summary>
        </member>
        <member name="M:Api.Controllers.FileController.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.FileController.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.FileController.GetDetails(System.String)">
            <summary>
            获取详情数据集合
            </summary>
            <param name="ids">id逗号拼接</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.FileController.GetDetails(System.Collections.Generic.List{System.String})">
            <summary>
            获取详情数据集合
            </summary>
            <param name="ids">id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.FileController.CheckMD5(System.String)">
            <summary>
            MD5校验
            </summary>
            <param name="md5"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.FileController.UploadSingleImage(Model.Common.FileDTO.ImageUploadParams)">
            <summary>
            单图上传
            </summary>
            <param name="option">选项</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.FileController.UploadSingleFile(Model.Common.FileDTO.FileUploadParams)">
            <summary>
            单文件上传
            </summary>
            <param name="option">选项</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.FileController.Preview(System.String)">
            <summary>
            预览
            </summary>
            <param name="id">文件Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.FileController.Browse(System.String)">
            <summary>
            浏览
            </summary>
            <param name="id">文件Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.FileController.Download(System.String)">
            <summary>
            下载
            </summary>
            <param name="id">文件Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.FileController.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.OperationRecordController">
            <summary>
            操作记录接口
            </summary>
        </member>
        <member name="M:Api.Controllers.OperationRecordController.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.OperationRecordController.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.WeChatOAuthController">
            <summary>
            微信认证接口
            </summary>
        </member>
        <member name="M:Api.Controllers.WeChatOAuthController.MemberLogin(System.String)">
            <summary>
            会员登录
            </summary>
            <param name="returnUrl">重定向地址</param>
        </member>
        <member name="M:Api.Controllers.WeChatOAuthController.UpdateMemberWeChatUserInfo(System.String,System.String)">
            <summary>
            更新会员微信用户信息
            </summary>
            <param name="memberId">会员Id</param>
            <param name="returnUrl">重定向地址</param>
        </member>
        <member name="M:Api.Controllers.WeChatOAuthController.GetUserBindUrl(System.String,System.Boolean,System.String)">
            <summary>
            获取用于系统用户绑定微信的链接
            </summary>
            <param name="userId">用户Id</param>
            <param name="asyncUserInfo">同步微信信息至用户信息</param>
            <param name="returnUrl">重定向地址</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.WeChatOAuthController.UserLogin(System.String)">
            <summary>
            系统用户登录
            </summary>
            <param name="returnUrl">重定向地址</param>
        </member>
        <member name="M:Api.Controllers.WeChatOAuthController.UpdateUserWeChatUserInfo(System.String,System.String)">
            <summary>
            更新系统用户微信用户信息
            </summary>
            <param name="userId">用户Id</param>
            <param name="returnUrl">重定向地址</param>
        </member>
        <member name="T:Api.Controllers.WeChatUserController">
            <summary>
            微信用户信息接口
            </summary>
        </member>
        <member name="M:Api.Controllers.WeChatUserController.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.WeChatUserController.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.SampleController">
            <summary>
            示例接口
            </summary>
        </member>
        <member name="M:Api.Controllers.SampleController.#ctor(Business.Interface.Example.ISampleBusiness)">
            <summary>
            在构造函数中注入DI系统中注册的依赖
            </summary>
            <param name="sampleBusiness"></param>
        </member>
        <member name="F:Api.Controllers.SampleController.SampleBusiness">
            <summary>
            业务类
            </summary>
        </member>
        <member name="M:Api.Controllers.SampleController.GetList(Model.Utils.Pagination.PaginationDTO)">
             <summary>
             获取列表数据
             </summary>
             <remarks>
             ## 示例 1     一般查询
             
             #查询第一页，每页10条数据，按修改时间倒序排序。
             
                 POST /config/list
                 {
                     "PageIndex": 1,
                     "PageRows": 10,
                     "SortField": "ModifyTime",
                     "SortType": "desc"
                 }
             
             ## 示例 2     高级排序
             
             #查询第一页，每页10条数据，按修改时间倒序排序之后再按创建时间正序排列。
            
                 POST /config/list
                 {
                     "PageIndex": 1,
                     "PageRows": 10,
                     "AdvancedSort": [
                         {
                             "field": "ModifyTime",
                             "type": "desc"
                         },
                         {
                             "field": "CreateTime",
                             "type": "asc"
                         }
                     ]
                 }
             
             ## 示例 3     高级搜索 1
             
             #查询第一页，每页10条数据，筛选应用名称中包含“应用”，以及创建者为“管理员A”的数据。
             
                 POST /config/list
                 {
                     "PageIndex": 1,
                     "PageRows": 10,
                     "Filter": [
                         {
                             "field": "AppName",
                             "value": "应用",
                             "compare": "in"
                         },
                         {
                             "field": "CreatorName",
                             "value": "管理员A",
                             "compare": "eq"
                         }
                     ]
                 }
             
             ## 示例 4     高级搜索 2
             
             #查询第一页，每页10条数据，筛选应用名称中包含“应用”，并且创建者为“管理员A”，又或者创建时间大于“2020-03-10”的数据。
             
                 POST /config/list
                 {
                     "PageIndex": 1,
                     "PageRows": 10,
                     "Filter": [
                         {
                             "group": "start",
                             "field": "AppName",
                             "value": "应用",
                             "compare": "in"
                         },
                         {
                             "group": "end",
                             "relation": "and"
                             "field": "CreatorName",
                             "value": "管理员A",
                             "compare": "eq"
                         },
                         {
                             "relation": "or"
                             "field": "CreateTime",
                             "value": "2020-03-10",
                             "compare": "gt"
                         }
                     ]
                 }
             </remarks>
             <param name="pagination">分页设置</param>
             <returns></returns>
        </member>
        <member name="M:Api.Controllers.SampleController.GetDetail(System.String)">
            <summary>
            详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.SampleController.Create(Model.Example.DBDTO.Create)">
            <summary>
            新增
            </summary>
            <param name="data">表单数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.SampleController.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.SampleController.Edit(Model.Example.DBDTO.Edit)">
            <summary>
            编辑数据
            </summary>
            <param name="data">表单数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.SampleController.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除数据
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.MemberController">
            <summary>
            会员接口
            </summary>
        </member>
        <member name="M:Api.Controllers.MemberController.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MemberController.DropdownList(System.String,Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取下拉列表数据
            </summary>
            <param name="condition">关键词(多个用空格分隔)</param>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MemberController.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MemberController.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MemberController.Edit(Model.Public.MemberDTO.Edit)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MemberController.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MemberController.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.AuthoritiesController">
            <summary>
            权限接口
            </summary>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.AuthorizeRoleForUser(Model.System.AuthorizeDTO.RoleForUser)">
            <summary>
            为用户授权角色
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.AuthorizeRoleForMember(Model.System.AuthorizeDTO.RoleForMember)">
            <summary>
            为会员授权角色
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.AuthorizeMenuForUser(Model.System.AuthorizeDTO.MenuForUser)">
            <summary>
            为用户授权菜单
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.AuthorizeResourcesForUser(Model.System.AuthorizeDTO.ResourcesForUser)">
            <summary>
            为用户授权资源
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.AuthorizeMenuForRole(Model.System.AuthorizeDTO.MenuForRole)">
            <summary>
            为角色授权菜单
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.AuthorizeResourcesForRole(Model.System.AuthorizeDTO.ResourcesForRole)">
            <summary>
            为角色授权资源
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationRoleForAllUser(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            撤销角色的全部系统用户授权
            </summary>
            <param name="roleIds">角色Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationRoleForAllMember(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            撤销角色的全部会员授权
            </summary>
            <param name="roleIds">角色Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationRoleForUser(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            撤销用户的全部角色授权
            </summary>
            <param name="userIds">用户Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationRoleForMember(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            撤销会员的全部角色授权
            </summary>
            <param name="memberIds">会员Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationMenuForUser(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            撤销用户的全部菜单授权
            </summary>
            <param name="userIds">用户Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationResourcesForUser(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            撤销用户的全部资源授权
            </summary>
            <param name="userIds">用户Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationMenuForRole(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            撤销角色的全部菜单授权
            </summary>
            <param name="roleIds">角色Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationResourcesForRole(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            撤销角色的全部资源授权
            </summary>
            <param name="roleIds">角色Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationRoleForUser(Model.System.AuthorizeDTO.RoleForUser)">
            <summary>
            撤销用户的角色授权
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationRoleForMember(Model.System.AuthorizeDTO.RoleForMember)">
            <summary>
            撤销会员的角色授权
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationMenuForUser(Model.System.AuthorizeDTO.MenuForUser)">
            <summary>
            撤销用户的菜单授权
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationResourcesForUser(Model.System.AuthorizeDTO.ResourcesForUser)">
            <summary>
            撤销用户的资源授权
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationMenuForRole(Model.System.AuthorizeDTO.MenuForRole)">
            <summary>
            撤销角色的菜单授权
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationResourcesForRole(Model.System.AuthorizeDTO.ResourcesForRole)">
            <summary>
            撤销角色的资源授权
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationMenuForAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            撤销所有用户和角色的菜单授权
            </summary>
            <param name="menuIds">菜单Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.RevocationResourcesForAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            撤销所有用户和角色的资源授权
            </summary>
            <param name="resourcesIds">资源Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetUser(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取用户的授权数据
            </summary>
            <param name="userId">用户Id</param>
            <param name="includeRole">包括授权角色</param>
            <param name="includeMenu">包括授权菜单</param>
            <param name="includeResources">包括授权资源</param>
            <param name="mergeRoleMenu">合并角色的授权菜单</param>
            <param name="mergeRoleResources">合并角色的授权资源</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetMember(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取会员的授权数据
            </summary>
            <param name="memberId">会员Id</param>
            <param name="includeRole">包括授权角色</param>
            <param name="includeMenu">包括授权菜单</param>
            <param name="includeResources">包括授权资源</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetUserRole(System.String,System.Boolean,System.Boolean)">
            <summary>
            获取授权给用户的角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="includeMenu">包括授权菜单</param>
            <param name="includeResources">包括授权资源</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetMemberRole(System.String,System.Boolean,System.Boolean)">
            <summary>
            获取授权给会员的角色
            </summary>
            <param name="memberId">会员Id</param>
            <param name="includeMenu">包括授权菜单</param>
            <param name="includeResources">包括授权资源</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetUserMenu(System.String,System.Boolean)">
            <summary>
            获取授权给用户的菜单
            </summary>
            <param name="userId">用户Id</param>
            <param name="mergeRoleMenu">包括角色的授权菜单</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetMemberMenu(System.String)">
            <summary>
            获取授权给会员的菜单
            </summary>
            <param name="memberId">会员Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetUserResources(System.String,System.Boolean)">
            <summary>
            获权授权给用户的资源
            </summary>
            <param name="userId">用户Id</param>
            <param name="mergeRoleResources">包括角色的授权资源</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetMemberResources(System.String)">
            <summary>
            获权授权给会员的资源
            </summary>
            <param name="memberId">会员Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetRole(System.String,System.Boolean,System.Boolean)">
            <summary>
            获取角色的授权数据
            </summary>
            <param name="roleId">角色Id</param>
            <param name="includeMenu">包括授权菜单</param>
            <param name="includeResources">包括授权资源</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetRoleMenu(System.String)">
            <summary>
            获取授权给角色的菜单
            </summary>
            <param name="roleId">角色Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.GetRoleResources(System.String)">
            <summary>
            获取授权给角色的资源
            </summary>
            <param name="roleId">角色Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.IsSuperAdminUser(System.String,System.Boolean)">
            <summary>
            是否为超级管理员
            </summary>
            <param name="userId">用户Id</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.IsSuperAdminRole(System.String,System.Boolean)">
            <summary>
            是否为超级管理角色
            </summary>
            <param name="roleId">角色Id</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.IsAdminUser(System.String,System.Boolean)">
            <summary>
            是否为管理员
            </summary>
            <param name="userId">用户Id</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.IsAdminRole(System.String,System.Boolean)">
            <summary>
            是否为管理角色
            </summary>
            <param name="roleId">角色Id</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.UserHasRole(System.String,System.String,System.Boolean)">
            <summary>
            用户是否拥有角色授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleId">角色Id</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.MemberHasRole(System.String,System.String,System.Boolean)">
            <summary>
            会员是否拥有角色授权
            </summary>
            <param name="memberId">会员Id</param>
            <param name="roleId">角色Id</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.UserHasMenu(System.String,System.String,System.Boolean)">
            <summary>
            用户是否拥有菜单授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="menuId">菜单Id</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.UserHasMenuUri(System.String,System.String,System.Boolean)">
            <summary>
            用户是否拥有菜单授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="menuUri">菜单链接</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.MemberHasMenu(System.String,System.String,System.Boolean)">
            <summary>
            会员是否拥有菜单授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="menuId">菜单Id</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.MemberHasMenuUri(System.String,System.String,System.Boolean)">
            <summary>
            会员是否拥有菜单授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="menuUri">菜单链接</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.UserHasResources(System.String,System.String,System.Boolean)">
            <summary>
            用户是否拥有资源授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="resourcesId">资源Id</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.UserHasResourcesUri(System.String,System.String,System.Boolean)">
            <summary>
            用户是否拥有资源授权
            </summary>
            <param name="userId">用户Id</param>
            <param name="resourcesUri">资源链接</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.MemberHasResources(System.String,System.String,System.Boolean)">
            <summary>
            会员是否拥有资源授权
            </summary>
            <param name="memberId">会员Id</param>
            <param name="resourcesId">资源Id</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.AuthoritiesController.MemberHasResourcesUri(System.String,System.String,System.Boolean)">
            <summary>
            会员是否拥有资源授权
            </summary>
            <param name="memberId">会员Id</param>
            <param name="resourcesUri">资源链接</param>
            <param name="checkEnable">检查是否已启用（默认true）</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.MenuController">
            <summary>
            菜单接口
            </summary>
        </member>
        <member name="M:Api.Controllers.MenuController.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MenuController.GetTreeList(Model.System.MenuDTO.TreeListParamter)">
            <summary>
            获取树状列表数据
            </summary>
            <param name="paramter">树状列表</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MenuController.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MenuController.Create(Model.System.MenuDTO.Create)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MenuController.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MenuController.Edit(Model.System.MenuDTO.Edit)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MenuController.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MenuController.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MenuController.Sort(Model.System.MenuDTO.Sort)">
            <summary>
            排序
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.MenuController.DragSort(Model.System.MenuDTO.DragSort)">
            <summary>
            拖动排序
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.ResourcesController">
            <summary>
            资源接口
            </summary>
        </member>
        <member name="M:Api.Controllers.ResourcesController.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.ResourcesController.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.ResourcesController.Create(Model.System.ResourcesDTO.Create)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.ResourcesController.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.ResourcesController.Edit(Model.System.ResourcesDTO.Edit)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.ResourcesController.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.ResourcesController.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.RoleController">
            <summary>
            角色接口
            </summary>
        </member>
        <member name="M:Api.Controllers.RoleController.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.RoleController.GetTreeList(Model.System.RoleDTO.TreeListParamter)">
            <summary>
            获取树状列表数据
            </summary>
            <param name="paramter">树状列表</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.RoleController.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.RoleController.Create(Model.System.RoleDTO.Create)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.RoleController.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.RoleController.Edit(Model.System.RoleDTO.Edit)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.RoleController.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.RoleController.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.RoleController.Sort(Model.System.RoleDTO.Sort)">
            <summary>
            排序
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.RoleController.DragSort(Model.System.RoleDTO.DragSort)">
            <summary>
            拖动排序
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.UserController">
            <summary>
            系统用户接口
            </summary>
        </member>
        <member name="M:Api.Controllers.UserController.GetList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取列表数据
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.UserController.DropdownList(System.String,Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取下拉列表数据
            </summary>
            <param name="condition">关键词(多个用空格分隔)</param>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.UserController.GetDetail(System.String)">
            <summary>
            获取详情数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.UserController.Create(Model.System.UserDTO.Create)">
            <summary>
            新增
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.UserController.GetEdit(System.String)">
            <summary>
            获取编辑数据
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.UserController.Edit(Model.System.UserDTO.Edit)">
            <summary>
            编辑
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.UserController.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除
            </summary>
            <param name="ids">Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.UserController.Enable(System.String,System.Boolean)">
            <summary>
            启用/禁用
            </summary>
            <param name="id">数据</param>
            <param name="enable">设置状态</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.UserController.UpdatePassword(Model.System.UserDTO.UpdatePassword)">
            <summary>
            更新密码
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.Utils.BaseApiController">
            <summary>
            对外接口基控制器
            </summary>
        </member>
        <member name="P:Api.Controllers.Utils.BaseApiController.Config">
            <summary>
            系统日志
            </summary>
        </member>
        <member name="P:Api.Controllers.Utils.BaseApiController.Operator">
            <summary>
            当前登录人
            </summary>
        </member>
        <member name="T:Api.Controllers.Utils.BaseController">
            <summary>
            基控制器
            </summary>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.OpenApiJsonContent``1(``0)">
            <summary>
            返回JSON
            </summary>
            <typeparam name="TOpenApiSchema">接口架构类型</typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.OpenApiJsonContent``1(System.Object)">
            <summary>
            返回JSON
            </summary>
            <typeparam name="TOpenApiSchema">接口架构类型</typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.JsonContent(System.Object)">
            <summary>
            返回JSON
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.OpenApiJsonContent``1(System.Collections.Generic.List{``0},Model.Utils.Pagination.PaginationDTO,System.Boolean,System.String)">
            <summary>
            返回JSON
            </summary>
            <typeparam name="TOpenApiSchema">接口架构类型</typeparam>
            <param name="obj"></param>
            <param name="pagination"></param>
            <param name="success"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.OpenApiJsonContent``1(System.Collections.Generic.List{System.Object},Model.Utils.Pagination.PaginationDTO,System.Boolean,System.String)">
            <summary>
            返回JSON
            </summary>
            <typeparam name="TOpenApiSchema">接口架构类型</typeparam>
            <param name="obj"></param>
            <param name="pagination"></param>
            <param name="success"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.JsonContent(System.Collections.Generic.List{System.Object},Model.Utils.Pagination.PaginationDTO,System.Boolean,System.String)">
            <summary>
            返回JSON
            </summary>
            <param name="obj"></param>
            <param name="pagination"></param>
            <param name="success"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.JsonContent(System.String)">
            <summary>
            返回JSON
            </summary>
            <param name="jsonStr">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.HtmlContent(System.String)">
            <summary>
            返回html
            </summary>
            <param name="body">html内容</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.Success">
            <summary>
            返回成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.Success(System.String)">
            <summary>
            返回成功
            </summary>
            <param name="msg">消息</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.Success``1(``0)">
            <summary>
            返回成功
            </summary>
            <param name="data">返回的数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.Success``1(``0,System.String)">
            <summary>
            返回成功
            </summary>
            <param name="data">返回的数据</param>
            <param name="msg">返回的消息</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.SuccessOpenApiSchema``1(``0,System.String)">
            <summary>
            返回成功
            </summary>
            <typeparam name="TOpenApiSchema">接口架构类型</typeparam>
            <param name="data"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.Error">
            <summary>
            返回错误
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.Error(System.String)">
            <summary>
            返回错误
            </summary>
            <param name="msg">错误提示</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.ErrorOpenApiSchema``1(``0,System.String)">
            <summary>
            返回错误
            </summary>
            <typeparam name="TOpenApiSchema">接口架构类型</typeparam>
            <param name="data"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.DataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            返回表格数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">数据列表</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.BaseController.DataTable``1(System.Collections.Generic.List{``0},Model.Utils.Pagination.PaginationDTO)">
            <summary>
            返回表格数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">数据列表</param>
            <param name="pagination">分页参数</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.Utils.CASController">
            <summary>
            CAS认证接口
            </summary>
        </member>
        <member name="M:Api.Controllers.Utils.CASController.Authorize(System.String)">
            <summary>
            登录验证
            </summary>
            <remarks>
            <para>验证后重定向至指定地址</para>
            <para>未登录时将会先重定向至登录</para>
            <para>身份信息将会附加在重定向地址之后（?casInfo=【身份信息JSON序列化字符串】）</para>
            <para>未指定地址时将直接输出身份信息</para>
            </remarks>
            <param name="returnUrl">重定向地址</param>
            <returns>身份信息</returns>
        </member>
        <member name="M:Api.Controllers.Utils.CASController.Authorized">
            <summary>
            登录验证
            </summary>
            <remarks>
            <para>使用此接口判断登录状态</para>
            <para>已登录返回身份信息</para>
            <para>未登录返回状态码401</para>
            </remarks>
            <returns>身份信息</returns>
        </member>
        <member name="M:Api.Controllers.Utils.CASController.AccessDenied">
            <summary>
            拒绝访问
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.CASController.ExternalLoginFailure">
            <summary>
            登录异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.CASController.Login(System.String)">
            <summary>
            登录
            </summary>
            <param name="returnUrl">登录后重定向地址</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.CASController.LogOut(System.String,System.Boolean)">
            <summary>
            注销
            </summary>
            <param name="returnUrl">注销后重定向地址</param>
            <param name="logoutCAS">单点注销（当前登录的所有应用都会注销）</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.CASController.LogOut">
            <summary>
            注销
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.CASController.GetToken">
            <summary>
            获取验证后的身份信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.Utils.LogController">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:Api.Controllers.Utils.LogController.GetDefaultType">
            <summary>
            获取默认的日志组件类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.LogController.GetFileList(System.DateTime,System.DateTime)">
            <summary>
            获取日志文件列表
            </summary>
            <param name="start">开始日期</param>
            <param name="end">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.LogController.GetFileContent(System.String)">
            <summary>
            获取日志文件内容
            </summary>
            <param name="filename">文件名</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.LogController.GetESList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取ES数据列表
            </summary>
            <param name="pagination">排序、筛选以及数据量设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.LogController.GetESDetail(System.String)">
            <summary>
            获取ES数据详情
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.LogController.GetDBList(Model.Utils.Pagination.PaginationDTO)">
            <summary>
            获取数据库数据列表
            </summary>
            <param name="pagination">分页设置</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.LogController.GetDBDetail(System.String)">
            <summary>
            获取数据库数据详情
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.Utils.SampleAuthenticationController">
            <summary>
            简易身份验证接口
            </summary>
        </member>
        <member name="M:Api.Controllers.Utils.SampleAuthenticationController.Authorized">
            <summary>
            登录验证
            </summary>
            <remarks>
            <para>使用此接口判断登录状态</para>
            <para>已登录返回身份信息</para>
            <para>未登录返回状态码401</para>
            </remarks>
            <returns>身份信息</returns>
        </member>
        <member name="M:Api.Controllers.Utils.SampleAuthenticationController.AccessDenied">
            <summary>
            拒绝访问
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.SampleAuthenticationController.ExternalLoginFailure">
            <summary>
            登录异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.SampleAuthenticationController.Login(Model.Utils.SampleAuthentication.SampleAuthenticationDTO.LoginRequest)">
            <summary>
            登录
            </summary>
            <param name="data">参数</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.SampleAuthenticationController.Logout(Model.Utils.SampleAuthentication.SampleAuthenticationDTO.LogoutRequest)">
            <summary>
            注销
            </summary>
            <param name="data">参数</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.SampleAuthenticationController.GetToken">
            <summary>
            获取验证后的身份信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Controllers.Utils.TestController">
            <summary>
            测试
            </summary>
        </member>
        <member name="M:Api.Controllers.Utils.TestController.DependencyInjectionTest(System.String)">
            <summary>
            测试依赖注入
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.TestController.TestDataBaseWithTable(System.String,System.String)">
            <summary>
            测试数据库指定的表
            </summary>
            <param name="table">表名</param>
            <param name="where">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:Api.Controllers.Utils.TestController.TestDataBaseWithStoredProcedure(System.String)">
            <summary>
            测试数据库指定的存储过程
            </summary>
            <param name="procedure">存储过程</param>
            <returns></returns>
        </member>
        <member name="T:Api.BaseActionFilter">
            <summary>
            拦截类基类
            </summary>
        </member>
        <member name="P:Api.BaseActionFilter.Operator">
            <summary>
            当前操作者
            </summary>
        </member>
        <member name="M:Api.BaseActionFilter.JsonContent(System.String)">
            <summary>
            返回JSON
            </summary>
            <param name="json">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Api.BaseActionFilter.Success">
            <summary>
            返回成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.BaseActionFilter.Success(System.String)">
            <summary>
            返回成功
            </summary>
            <param name="msg">消息</param>
            <returns></returns>
        </member>
        <member name="M:Api.BaseActionFilter.Success``1(``0)">
            <summary>
            返回成功
            </summary>
            <param name="data">返回的数据</param>
            <returns></returns>
        </member>
        <member name="M:Api.BaseActionFilter.Error">
            <summary>
            返回错误
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.BaseActionFilter.Error(System.String)">
            <summary>
            返回错误
            </summary>
            <param name="msg">错误提示</param>
            <returns></returns>
        </member>
        <member name="M:Api.BaseActionFilter.Error(System.String,Model.Utils.Result.ErrorCode)">
            <summary>
            返回错误
            </summary>
            <param name="msg">错误提示</param>
            <param name="errorCode">错误代码</param>
            <returns></returns>
        </member>
        <member name="T:Api.JsonParamterAttribute">
            <summary>
            Json参数支持
            </summary>
        </member>
        <member name="M:Api.JsonParamterAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="openApiSchemaFilter">接口架构过滤</param>
        </member>
        <member name="F:Api.JsonParamterAttribute.OpenApiSchemaFilter">
            <summary>
            接口架构过滤
            </summary>
        </member>
        <member name="M:Api.JsonParamterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:Api.JsonParamterAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Api.NoJsonParamterAttribute">
            <summary>
            忽略Json参数支持
            </summary>
        </member>
        <member name="M:Api.NoJsonParamterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:Api.NoJsonParamterAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Api.CheckJWTAttribute">
            <summary>
            JWT校验
            </summary>
        </member>
        <member name="M:Api.CheckJWTAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:Api.CheckJWTAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Api.NoCheckJWTAttribute">
            <summary>
            忽略JWT校验
            </summary>
        </member>
        <member name="M:Api.NoCheckJWTAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:Api.NoCheckJWTAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Api.DocumentFilter">
            <summary>
            接口文档过滤器
            </summary>
            <remarks>LCTR 2021-02-21</remarks>
        </member>
        <member name="T:Api.OpenApiSchemaFilter">
            <summary>
            接口架构过滤器
            </summary>
            <remarks>LCTR 2020-03-10</remarks>
        </member>
        <member name="T:Api.GlobalExceptionFilter">
            <summary>
            全局错误拦截
            </summary>
        </member>
        <member name="T:Api.CheckParamNotEmptyAttribute">
            <summary>
            参数非空校验
            </summary>
        </member>
        <member name="M:Api.CheckParamNotEmptyAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="filterContext">过滤器上下文</param>
        </member>
        <member name="M:Api.CheckParamNotEmptyAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Api.CheckSignAttribute">
            <summary>
            校验签名、十分严格
            防抵赖、防伪造、防重复调用
            </summary>
        </member>
        <member name="M:Api.CheckSignAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Api.CheckSignAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Api.IgnoreSignAttribute">
            <summary>
            忽略接口签名校验
            </summary>
        </member>
        <member name="T:Api.ApiPermissionAttribute">
            <summary>
            接口权限校验
            </summary>
        </member>
        <member name="M:Api.ApiPermissionAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:Api.ApiPermissionAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Api.NoApiPermissionAttribute">
            <summary>
            忽略接口权限校验
            </summary>
        </member>
        <member name="M:Api.NoApiPermissionAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:Api.NoApiPermissionAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Api.CheckModelAttribute">
            <summary>
            接口模型校验
            LCTR 2019-12-12
            </summary>
        </member>
        <member name="P:Api.CheckModelAttribute.Ignore">
            <summary>
            忽略字段
            </summary>
        </member>
        <member name="M:Api.CheckModelAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:Api.CheckModelAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Api.NoCheckModelAttribute">
            <summary>
            忽略接口模型校验
            LCTR 2019-12-12
            </summary>
        </member>
        <member name="M:Api.NoCheckModelAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:Api.NoCheckModelAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Api.Middleware.CasCustomServiceTicketValidator">
            <summary>
            自定义CAS票据验证器
            </summary>
            <remarks>如果不是标准的cas协议，就需要在此类中自定义解析逻辑</remarks>
        </member>
        <member name="T:Api.Middleware.CasSingleSignOutMiddleware">
            <summary>
            CAS单点注销中间件
            </summary>
        </member>
        <member name="T:Api.Middleware.CorsMiddleware">
            <summary>
            跨域中间件
            </summary>
        </member>
        <member name="M:Api.Middleware.CorsMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            管道执行到该中间件时候下一个中间件的RequestDelegate请求委托，如果有其它参数，也同样通过注入的方式获得
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Api.Middleware.CorsMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            自定义中间件要执行的逻辑
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:Api.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Api.Startup.Config">
            <summary>
            系统配置
            </summary>
        </member>
        <member name="M:Api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <remarks>
            <para>This method gets called by the runtime. Use this method to add services to the container.</para>
            <para>For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940</para>
            </remarks>
        </member>
        <member name="M:Api.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            配置Autofac容器
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Api.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <remarks>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </remarks>
        </member>
    </members>
</doc>
